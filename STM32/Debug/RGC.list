
RGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  08004958  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08004958  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ce  00000000  00000000  0002f996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015471  00000000  00000000  00033060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa4a  00000000  00000000  000484d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f93b  00000000  00000000  00052f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000231c  00000000  00000000  000c28d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004160 	.word	0x08004160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004160 	.word	0x08004160

0800014c <calibrate>:
Point joystickHome1 = { 0, 0 };
Point joystickHome2 = { 0, 0 };

const int joystickThreshold = 300;

void calibrate() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	Point values = { 0, 0 };
 8000152:	2300      	movs	r3, #0
 8000154:	603b      	str	r3, [r7, #0]
 8000156:	2300      	movs	r3, #0
 8000158:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 10; i++) {
 800015a:	2300      	movs	r3, #0
 800015c:	60fb      	str	r3, [r7, #12]
 800015e:	e024      	b.n	80001aa <calibrate+0x5e>
		HAL_ADC_Start(&hadc1);
 8000160:	483f      	ldr	r0, [pc, #252]	; (8000260 <calibrate+0x114>)
 8000162:	f002 f8c7 	bl	80022f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000166:	2164      	movs	r1, #100	; 0x64
 8000168:	483d      	ldr	r0, [pc, #244]	; (8000260 <calibrate+0x114>)
 800016a:	f002 f99d 	bl	80024a8 <HAL_ADC_PollForConversion>
		values.row += HAL_ADC_GetValue(&hadc1);
 800016e:	483c      	ldr	r0, [pc, #240]	; (8000260 <calibrate+0x114>)
 8000170:	f002 fa94 	bl	800269c <HAL_ADC_GetValue>
 8000174:	4602      	mov	r2, r0
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	4413      	add	r3, r2
 800017a:	603b      	str	r3, [r7, #0]
		HAL_ADC_Stop(&hadc1);
 800017c:	4838      	ldr	r0, [pc, #224]	; (8000260 <calibrate+0x114>)
 800017e:	f002 f967 	bl	8002450 <HAL_ADC_Stop>

		HAL_ADC_Start(&hadc2);
 8000182:	4838      	ldr	r0, [pc, #224]	; (8000264 <calibrate+0x118>)
 8000184:	f002 f8b6 	bl	80022f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 8000188:	2164      	movs	r1, #100	; 0x64
 800018a:	4836      	ldr	r0, [pc, #216]	; (8000264 <calibrate+0x118>)
 800018c:	f002 f98c 	bl	80024a8 <HAL_ADC_PollForConversion>
		values.col += HAL_ADC_GetValue(&hadc2);
 8000190:	4834      	ldr	r0, [pc, #208]	; (8000264 <calibrate+0x118>)
 8000192:	f002 fa83 	bl	800269c <HAL_ADC_GetValue>
 8000196:	4602      	mov	r2, r0
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	607b      	str	r3, [r7, #4]
		HAL_ADC_Stop(&hadc2);
 800019e:	4831      	ldr	r0, [pc, #196]	; (8000264 <calibrate+0x118>)
 80001a0:	f002 f956 	bl	8002450 <HAL_ADC_Stop>
	for (int i = 0; i < 10; i++) {
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	3301      	adds	r3, #1
 80001a8:	60fb      	str	r3, [r7, #12]
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	2b09      	cmp	r3, #9
 80001ae:	ddd7      	ble.n	8000160 <calibrate+0x14>
	}
#ifdef SERIAL_DEBUG
		// TODO SERIAL DEBUG
#endif

	joystickHome1.row = values.row / 10;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	4a2d      	ldr	r2, [pc, #180]	; (8000268 <calibrate+0x11c>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1092      	asrs	r2, r2, #2
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	4a2b      	ldr	r2, [pc, #172]	; (800026c <calibrate+0x120>)
 80001c0:	6013      	str	r3, [r2, #0]
	joystickHome1.col = values.col / 10;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4a28      	ldr	r2, [pc, #160]	; (8000268 <calibrate+0x11c>)
 80001c6:	fb82 1203 	smull	r1, r2, r2, r3
 80001ca:	1092      	asrs	r2, r2, #2
 80001cc:	17db      	asrs	r3, r3, #31
 80001ce:	1ad3      	subs	r3, r2, r3
 80001d0:	4a26      	ldr	r2, [pc, #152]	; (800026c <calibrate+0x120>)
 80001d2:	6053      	str	r3, [r2, #4]

	values.row = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	603b      	str	r3, [r7, #0]
	values.col = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 10; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	60bb      	str	r3, [r7, #8]
 80001e0:	e024      	b.n	800022c <calibrate+0xe0>
		HAL_ADC_Start(&hadc1);
 80001e2:	481f      	ldr	r0, [pc, #124]	; (8000260 <calibrate+0x114>)
 80001e4:	f002 f886 	bl	80022f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80001e8:	2164      	movs	r1, #100	; 0x64
 80001ea:	481d      	ldr	r0, [pc, #116]	; (8000260 <calibrate+0x114>)
 80001ec:	f002 f95c 	bl	80024a8 <HAL_ADC_PollForConversion>
		values.row += HAL_ADC_GetValue(&hadc1);
 80001f0:	481b      	ldr	r0, [pc, #108]	; (8000260 <calibrate+0x114>)
 80001f2:	f002 fa53 	bl	800269c <HAL_ADC_GetValue>
 80001f6:	4602      	mov	r2, r0
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	4413      	add	r3, r2
 80001fc:	603b      	str	r3, [r7, #0]
		HAL_ADC_Stop(&hadc1);
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <calibrate+0x114>)
 8000200:	f002 f926 	bl	8002450 <HAL_ADC_Stop>

		HAL_ADC_Start(&hadc2);
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <calibrate+0x118>)
 8000206:	f002 f875 	bl	80022f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 800020a:	2164      	movs	r1, #100	; 0x64
 800020c:	4815      	ldr	r0, [pc, #84]	; (8000264 <calibrate+0x118>)
 800020e:	f002 f94b 	bl	80024a8 <HAL_ADC_PollForConversion>
		values.col += HAL_ADC_GetValue(&hadc2);
 8000212:	4814      	ldr	r0, [pc, #80]	; (8000264 <calibrate+0x118>)
 8000214:	f002 fa42 	bl	800269c <HAL_ADC_GetValue>
 8000218:	4602      	mov	r2, r0
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	607b      	str	r3, [r7, #4]
		HAL_ADC_Stop(&hadc2);
 8000220:	4810      	ldr	r0, [pc, #64]	; (8000264 <calibrate+0x118>)
 8000222:	f002 f915 	bl	8002450 <HAL_ADC_Stop>
	for (int i = 0; i < 10; i++) {
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	3301      	adds	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	2b09      	cmp	r3, #9
 8000230:	ddd7      	ble.n	80001e2 <calibrate+0x96>
	}

	joystickHome2.row = values.row / 10;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <calibrate+0x11c>)
 8000236:	fb82 1203 	smull	r1, r2, r2, r3
 800023a:	1092      	asrs	r2, r2, #2
 800023c:	17db      	asrs	r3, r3, #31
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <calibrate+0x124>)
 8000242:	6013      	str	r3, [r2, #0]
	joystickHome2.col = values.col / 10;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <calibrate+0x11c>)
 8000248:	fb82 1203 	smull	r1, r2, r2, r3
 800024c:	1092      	asrs	r2, r2, #2
 800024e:	17db      	asrs	r3, r3, #31
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <calibrate+0x124>)
 8000254:	6053      	str	r3, [r2, #4]
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000360 	.word	0x20000360
 8000264:	20000330 	.word	0x20000330
 8000268:	66666667 	.word	0x66666667
 800026c:	2000008c 	.word	0x2000008c
 8000270:	20000094 	.word	0x20000094

08000274 <waitJoystic>:

void waitJoystic() // common
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	while (scanJoystick(1) == -1 && scanJoystick(2) == -1) {
 8000278:	e002      	b.n	8000280 <waitJoystic+0xc>
		delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f001 ff40 	bl	8002100 <HAL_Delay>
	while (scanJoystick(1) == -1 && scanJoystick(2) == -1) {
 8000280:	2001      	movs	r0, #1
 8000282:	f000 f9eb 	bl	800065c <scanJoystick>
 8000286:	4603      	mov	r3, r0
 8000288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800028c:	d106      	bne.n	800029c <waitJoystic+0x28>
 800028e:	2002      	movs	r0, #2
 8000290:	f000 f9e4 	bl	800065c <scanJoystick>
 8000294:	4603      	mov	r3, r0
 8000296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800029a:	d0ee      	beq.n	800027a <waitJoystic+0x6>
	}
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <print_score>:

void print_score(int score) //вивести рахунок (для змійки)
		{
 80002a0:	b5b0      	push	{r4, r5, r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	if (score < 0 || score > 999)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f2c0 814d 	blt.w	800054a <print_score+0x2aa>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b6:	f280 8148 	bge.w	800054a <print_score+0x2aa>
		return;

	uint8_t third = (uint8_t)(score % 10);
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	4ba5      	ldr	r3, [pc, #660]	; (8000554 <print_score+0x2b4>)
 80002be:	fb83 1302 	smull	r1, r3, r3, r2
 80002c2:	1099      	asrs	r1, r3, #2
 80002c4:	17d3      	asrs	r3, r2, #31
 80002c6:	1ac9      	subs	r1, r1, r3
 80002c8:	460b      	mov	r3, r1
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	440b      	add	r3, r1
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	1ad1      	subs	r1, r2, r3
 80002d2:	460b      	mov	r3, r1
 80002d4:	737b      	strb	r3, [r7, #13]
	uint8_t second = (uint8_t)((score / 10) % 10);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a9e      	ldr	r2, [pc, #632]	; (8000554 <print_score+0x2b4>)
 80002da:	fb82 1203 	smull	r1, r2, r2, r3
 80002de:	1092      	asrs	r2, r2, #2
 80002e0:	17db      	asrs	r3, r3, #31
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	4b9b      	ldr	r3, [pc, #620]	; (8000554 <print_score+0x2b4>)
 80002e6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ea:	1099      	asrs	r1, r3, #2
 80002ec:	17d3      	asrs	r3, r2, #31
 80002ee:	1ac9      	subs	r1, r1, r3
 80002f0:	460b      	mov	r3, r1
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	440b      	add	r3, r1
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	1ad1      	subs	r1, r2, r3
 80002fa:	460b      	mov	r3, r1
 80002fc:	733b      	strb	r3, [r7, #12]
	uint8_t first = (uint8_t)((score / 100) % 10);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a95      	ldr	r2, [pc, #596]	; (8000558 <print_score+0x2b8>)
 8000302:	fb82 1203 	smull	r1, r2, r2, r3
 8000306:	1152      	asrs	r2, r2, #5
 8000308:	17db      	asrs	r3, r3, #31
 800030a:	1ad2      	subs	r2, r2, r3
 800030c:	4b91      	ldr	r3, [pc, #580]	; (8000554 <print_score+0x2b4>)
 800030e:	fb83 1302 	smull	r1, r3, r3, r2
 8000312:	1099      	asrs	r1, r3, #2
 8000314:	17d3      	asrs	r3, r2, #31
 8000316:	1ac9      	subs	r1, r1, r3
 8000318:	460b      	mov	r3, r1
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	440b      	add	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	1ad1      	subs	r1, r2, r3
 8000322:	460b      	mov	r3, r1
 8000324:	72fb      	strb	r3, [r7, #11]

	char num_size;
	if (score > 99)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b63      	cmp	r3, #99	; 0x63
 800032a:	dd02      	ble.n	8000332 <print_score+0x92>
		num_size = 3;
 800032c:	2303      	movs	r3, #3
 800032e:	75fb      	strb	r3, [r7, #23]
 8000330:	e007      	b.n	8000342 <print_score+0xa2>
	else if (score > 9)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b09      	cmp	r3, #9
 8000336:	dd02      	ble.n	800033e <print_score+0x9e>
		num_size = 2;
 8000338:	2302      	movs	r3, #2
 800033a:	75fb      	strb	r3, [r7, #23]
 800033c:	e001      	b.n	8000342 <print_score+0xa2>
	else
		num_size = 1;
 800033e:	2301      	movs	r3, #1
 8000340:	75fb      	strb	r3, [r7, #23]

	for (int k = 0; k < (int) sizeof(scoreMessage[0]) + 4 + (num_size * 8); k++) //  + num_size * 8
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
 8000346:	e0f4      	b.n	8000532 <print_score+0x292>
			{
		for (int8_t i = 0; i < 8; i++) {
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]
 800034c:	e0cd      	b.n	80004ea <print_score+0x24a>
			for (int8_t j = 0; j < 24; j++) {
 800034e:	2300      	movs	r3, #0
 8000350:	73bb      	strb	r3, [r7, #14]
 8000352:	e0bf      	b.n	80004d4 <print_score+0x234>
				if (j + k < 8)
 8000354:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	4413      	add	r3, r2
 800035c:	2b07      	cmp	r3, #7
 800035e:	dc0a      	bgt.n	8000376 <print_score+0xd6>
					setLEDM(i + 8, j, false, false); // Пропуск 8 пікселів
 8000360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000364:	f103 0008 	add.w	r0, r3, #8
 8000368:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800036c:	2300      	movs	r3, #0
 800036e:	2200      	movs	r2, #0
 8000370:	f001 fbf2 	bl	8001b58 <setLEDM>
 8000374:	e0a8      	b.n	80004c8 <print_score+0x228>
				else if (j + k < (int) sizeof(scoreMessage[0]) + 8)
 8000376:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	4413      	add	r3, r2
 800037e:	2b3e      	cmp	r3, #62	; 0x3e
 8000380:	dc1c      	bgt.n	80003bc <print_score+0x11c>
					setLEDM(i + 8, j, scoreMessage[i][j + k - 8], false); // Текст повідомлення
 8000382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000386:	f103 0408 	add.w	r4, r3, #8
 800038a:	f997 500e 	ldrsb.w	r5, [r7, #14]
 800038e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000392:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	440b      	add	r3, r1
 800039a:	f1a3 0108 	sub.w	r1, r3, #8
 800039e:	486f      	ldr	r0, [pc, #444]	; (800055c <print_score+0x2bc>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	4403      	add	r3, r0
 80003ac:	440b      	add	r3, r1
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	4629      	mov	r1, r5
 80003b4:	4620      	mov	r0, r4
 80003b6:	f001 fbcf 	bl	8001b58 <setLEDM>
 80003ba:	e085      	b.n	80004c8 <print_score+0x228>
				else if (j + k < 63 + 8 * num_size) {
 80003bc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	441a      	add	r2, r3
 80003c4:	7dfb      	ldrb	r3, [r7, #23]
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	333f      	adds	r3, #63	; 0x3f
 80003ca:	429a      	cmp	r2, r3
 80003cc:	da72      	bge.n	80004b4 <print_score+0x214>
					if (j + k > (int) sizeof(scoreMessage[0]) + 8 * (num_size))
 80003ce:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	441a      	add	r2, r3
 80003d6:	7dfb      	ldrb	r3, [r7, #23]
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	3337      	adds	r3, #55	; 0x37
 80003dc:	429a      	cmp	r2, r3
 80003de:	dd1f      	ble.n	8000420 <print_score+0x180>
						setLEDM(i + 8, j,
 80003e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e4:	f103 0408 	add.w	r4, r3, #8
 80003e8:	f997 500e 	ldrsb.w	r5, [r7, #14]
 80003ec:	7b79      	ldrb	r1, [r7, #13]
 80003ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
								digits[third][i][j + k - 63 - 8 * (num_size - 1)],
 80003f2:	f997 000e 	ldrsb.w	r0, [r7, #14]
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	4403      	add	r3, r0
 80003fa:	f1a3 003f 	sub.w	r0, r3, #63	; 0x3f
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	3b01      	subs	r3, #1
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	1ac3      	subs	r3, r0, r3
						setLEDM(i + 8, j,
 8000406:	4856      	ldr	r0, [pc, #344]	; (8000560 <print_score+0x2c0>)
 8000408:	00c9      	lsls	r1, r1, #3
 800040a:	440a      	add	r2, r1
 800040c:	00d2      	lsls	r2, r2, #3
 800040e:	4402      	add	r2, r0
 8000410:	4413      	add	r3, r2
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	4629      	mov	r1, r5
 8000418:	4620      	mov	r0, r4
 800041a:	f001 fb9d 	bl	8001b58 <setLEDM>
 800041e:	e053      	b.n	80004c8 <print_score+0x228>
								false);
					// Остання цифра рахунку
					else if (j + k
 8000420:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	441a      	add	r2, r3
							> (int) sizeof(scoreMessage[0])
									+ 8 * (num_size - 1))
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	3b01      	subs	r3, #1
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	3337      	adds	r3, #55	; 0x37
					else if (j + k
 8000430:	429a      	cmp	r2, r3
 8000432:	dd1f      	ble.n	8000474 <print_score+0x1d4>
						setLEDM(i + 8, j,
 8000434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000438:	f103 0408 	add.w	r4, r3, #8
 800043c:	f997 500e 	ldrsb.w	r5, [r7, #14]
 8000440:	7b39      	ldrb	r1, [r7, #12]
 8000442:	f997 200f 	ldrsb.w	r2, [r7, #15]
								digits[second][i][j + k - 63
 8000446:	f997 000e 	ldrsb.w	r0, [r7, #14]
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	4403      	add	r3, r0
 800044e:	f1a3 003f 	sub.w	r0, r3, #63	; 0x3f
										- 8 * (num_size - 2)], false);
 8000452:	7dfb      	ldrb	r3, [r7, #23]
 8000454:	3b02      	subs	r3, #2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	1ac3      	subs	r3, r0, r3
						setLEDM(i + 8, j,
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <print_score+0x2c0>)
 800045c:	00c9      	lsls	r1, r1, #3
 800045e:	440a      	add	r2, r1
 8000460:	00d2      	lsls	r2, r2, #3
 8000462:	4402      	add	r2, r0
 8000464:	4413      	add	r3, r2
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	2300      	movs	r3, #0
 800046a:	4629      	mov	r1, r5
 800046c:	4620      	mov	r0, r4
 800046e:	f001 fb73 	bl	8001b58 <setLEDM>
 8000472:	e029      	b.n	80004c8 <print_score+0x228>
					else
						setLEDM(i + 8, j,
 8000474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000478:	f103 0408 	add.w	r4, r3, #8
 800047c:	f997 500e 	ldrsb.w	r5, [r7, #14]
 8000480:	7af9      	ldrb	r1, [r7, #11]
 8000482:	f997 200f 	ldrsb.w	r2, [r7, #15]
								digits[first][i][j + k - 63 - 8 * (num_size - 3)],
 8000486:	f997 000e 	ldrsb.w	r0, [r7, #14]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	4403      	add	r3, r0
 800048e:	f1a3 003f 	sub.w	r0, r3, #63	; 0x3f
 8000492:	7dfb      	ldrb	r3, [r7, #23]
 8000494:	3b03      	subs	r3, #3
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	1ac3      	subs	r3, r0, r3
						setLEDM(i + 8, j,
 800049a:	4831      	ldr	r0, [pc, #196]	; (8000560 <print_score+0x2c0>)
 800049c:	00c9      	lsls	r1, r1, #3
 800049e:	440a      	add	r2, r1
 80004a0:	00d2      	lsls	r2, r2, #3
 80004a2:	4402      	add	r2, r0
 80004a4:	4413      	add	r3, r2
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	2300      	movs	r3, #0
 80004aa:	4629      	mov	r1, r5
 80004ac:	4620      	mov	r0, r4
 80004ae:	f001 fb53 	bl	8001b58 <setLEDM>
 80004b2:	e009      	b.n	80004c8 <print_score+0x228>
								false);
				} else
					setLEDM(i + 8, j, false, false);
 80004b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004b8:	f103 0008 	add.w	r0, r3, #8
 80004bc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80004c0:	2300      	movs	r3, #0
 80004c2:	2200      	movs	r2, #0
 80004c4:	f001 fb48 	bl	8001b58 <setLEDM>
			for (int8_t j = 0; j < 24; j++) {
 80004c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	73bb      	strb	r3, [r7, #14]
 80004d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80004d8:	2b17      	cmp	r3, #23
 80004da:	f77f af3b 	ble.w	8000354 <print_score+0xb4>
		for (int8_t i = 0; i < 8; i++) {
 80004de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	f77f af2d 	ble.w	800034e <print_score+0xae>
			}
		}

		sendAll();
 80004f4:	f001 fbca 	bl	8001c8c <sendAll>
		if (k > 10)
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	2b0a      	cmp	r3, #10
 80004fc:	dd13      	ble.n	8000526 <print_score+0x286>
			if (scanJoystick(1) != -1 || scanJoystick(2) != -1) {
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 f8ac 	bl	800065c <scanJoystick>
 8000504:	4603      	mov	r3, r0
 8000506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800050a:	d106      	bne.n	800051a <print_score+0x27a>
 800050c:	2002      	movs	r0, #2
 800050e:	f000 f8a5 	bl	800065c <scanJoystick>
 8000512:	4603      	mov	r3, r0
 8000514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000518:	d005      	beq.n	8000526 <print_score+0x286>
				clearAllDisplay();
 800051a:	f001 faab 	bl	8001a74 <clearAllDisplay>
				delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f001 fdee 	bl	8002100 <HAL_Delay>

				return;
 8000524:	e012      	b.n	800054c <print_score+0x2ac>
			}

		delay(40);
 8000526:	2028      	movs	r0, #40	; 0x28
 8000528:	f001 fdea 	bl	8002100 <HAL_Delay>
	for (int k = 0; k < (int) sizeof(scoreMessage[0]) + 4 + (num_size * 8); k++) //  + num_size * 8
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	3301      	adds	r3, #1
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	00db      	lsls	r3, r3, #3
 8000536:	333b      	adds	r3, #59	; 0x3b
 8000538:	693a      	ldr	r2, [r7, #16]
 800053a:	429a      	cmp	r2, r3
 800053c:	f6ff af04 	blt.w	8000348 <print_score+0xa8>
	}

	clearAllDisplay();
 8000540:	f001 fa98 	bl	8001a74 <clearAllDisplay>
	waitJoystic();
 8000544:	f7ff fe96 	bl	8000274 <waitJoystic>
 8000548:	e000      	b.n	800054c <print_score+0x2ac>
		return;
 800054a:	bf00      	nop
}
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bdb0      	pop	{r4, r5, r7, pc}
 8000552:	bf00      	nop
 8000554:	66666667 	.word	0x66666667
 8000558:	51eb851f 	.word	0x51eb851f
 800055c:	08004710 	.word	0x08004710
 8000560:	080041a0 	.word	0x080041a0

08000564 <win_msg>:

void win_msg(uint8_t player) // вивести повідомлення про перемогу
		{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	for (int k = 0; k < 98; k++) {
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e064      	b.n	800063e <win_msg+0xda>
		for (int i = 0; i < 8; i++) {
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	e056      	b.n	8000628 <win_msg+0xc4>
			for (int j = 0; j < 24; j++)
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e04d      	b.n	800061c <win_msg+0xb8>
				if (j + k < 8)
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	4413      	add	r3, r2
 8000586:	2b07      	cmp	r3, #7
 8000588:	dc08      	bgt.n	800059c <win_msg+0x38>
					setLEDM(i + 8, j, false, false);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	f103 0008 	add.w	r0, r3, #8
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	68f9      	ldr	r1, [r7, #12]
 8000596:	f001 fadf 	bl	8001b58 <setLEDM>
 800059a:	e03c      	b.n	8000616 <win_msg+0xb2>
				else if (j + k < 16)
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	dc15      	bgt.n	80005d2 <win_msg+0x6e>
					setLEDM(i + 8, j, digits[player][i][j + k - 8], false);
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	f103 0408 	add.w	r4, r3, #8
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	68f9      	ldr	r1, [r7, #12]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	440b      	add	r3, r1
 80005b4:	3b08      	subs	r3, #8
 80005b6:	4827      	ldr	r0, [pc, #156]	; (8000654 <win_msg+0xf0>)
 80005b8:	00d1      	lsls	r1, r2, #3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	440a      	add	r2, r1
 80005be:	00d2      	lsls	r2, r2, #3
 80005c0:	4402      	add	r2, r0
 80005c2:	4413      	add	r3, r2
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	68f9      	ldr	r1, [r7, #12]
 80005ca:	4620      	mov	r0, r4
 80005cc:	f001 fac4 	bl	8001b58 <setLEDM>
 80005d0:	e021      	b.n	8000616 <win_msg+0xb2>
				else if (j + k < 110)
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	4413      	add	r3, r2
 80005d8:	2b6d      	cmp	r3, #109	; 0x6d
 80005da:	dc14      	bgt.n	8000606 <win_msg+0xa2>
					setLEDM(i + 8, j, winMSG[i][j + k - 16], false);
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	f103 0408 	add.w	r4, r3, #8
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	4413      	add	r3, r2
 80005e8:	3b10      	subs	r3, #16
 80005ea:	491b      	ldr	r1, [pc, #108]	; (8000658 <win_msg+0xf4>)
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	205e      	movs	r0, #94	; 0x5e
 80005f0:	fb00 f202 	mul.w	r2, r0, r2
 80005f4:	440a      	add	r2, r1
 80005f6:	4413      	add	r3, r2
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	68f9      	ldr	r1, [r7, #12]
 80005fe:	4620      	mov	r0, r4
 8000600:	f001 faaa 	bl	8001b58 <setLEDM>
 8000604:	e007      	b.n	8000616 <win_msg+0xb2>
				else
					setLEDM(i + 8, j, false, false);
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	f103 0008 	add.w	r0, r3, #8
 800060c:	2300      	movs	r3, #0
 800060e:	2200      	movs	r2, #0
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	f001 faa1 	bl	8001b58 <setLEDM>
			for (int j = 0; j < 24; j++)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b17      	cmp	r3, #23
 8000620:	ddae      	ble.n	8000580 <win_msg+0x1c>
		for (int i = 0; i < 8; i++) {
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	3301      	adds	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	2b07      	cmp	r3, #7
 800062c:	dda5      	ble.n	800057a <win_msg+0x16>
		}

		sendAll();
 800062e:	f001 fb2d 	bl	8001c8c <sendAll>
		delay(50);
 8000632:	2032      	movs	r0, #50	; 0x32
 8000634:	f001 fd64 	bl	8002100 <HAL_Delay>
	for (int k = 0; k < 98; k++) {
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b61      	cmp	r3, #97	; 0x61
 8000642:	dd97      	ble.n	8000574 <win_msg+0x10>
	}

	clearAllDisplay();
 8000644:	f001 fa16 	bl	8001a74 <clearAllDisplay>

	waitJoystic();
 8000648:	f7ff fe14 	bl	8000274 <waitJoystic>
}
 800064c:	bf00      	nop
 800064e:	371c      	adds	r7, #28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	080041a0 	.word	0x080041a0
 8000658:	08004420 	.word	0x08004420

0800065c <scanJoystick>:
		}
		sendAll();
	}
}

int8_t scanJoystick(int8_t player) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
		int X, Y;

		if (player == 1) {
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d145      	bne.n	80006fa <scanJoystick+0x9e>
			HAL_ADC_Start(&hadc1);
 800066e:	4849      	ldr	r0, [pc, #292]	; (8000794 <scanJoystick+0x138>)
 8000670:	f001 fe40 	bl	80022f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000674:	2164      	movs	r1, #100	; 0x64
 8000676:	4847      	ldr	r0, [pc, #284]	; (8000794 <scanJoystick+0x138>)
 8000678:	f001 ff16 	bl	80024a8 <HAL_ADC_PollForConversion>
			X = HAL_ADC_GetValue(&hadc1);
 800067c:	4845      	ldr	r0, [pc, #276]	; (8000794 <scanJoystick+0x138>)
 800067e:	f002 f80d 	bl	800269c <HAL_ADC_GetValue>
 8000682:	4603      	mov	r3, r0
 8000684:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc1);
 8000686:	4843      	ldr	r0, [pc, #268]	; (8000794 <scanJoystick+0x138>)
 8000688:	f001 fee2 	bl	8002450 <HAL_ADC_Stop>

			HAL_ADC_Start(&hadc2);
 800068c:	4842      	ldr	r0, [pc, #264]	; (8000798 <scanJoystick+0x13c>)
 800068e:	f001 fe31 	bl	80022f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 100);
 8000692:	2164      	movs	r1, #100	; 0x64
 8000694:	4840      	ldr	r0, [pc, #256]	; (8000798 <scanJoystick+0x13c>)
 8000696:	f001 ff07 	bl	80024a8 <HAL_ADC_PollForConversion>
			Y = HAL_ADC_GetValue(&hadc2);
 800069a:	483f      	ldr	r0, [pc, #252]	; (8000798 <scanJoystick+0x13c>)
 800069c:	f001 fffe 	bl	800269c <HAL_ADC_GetValue>
 80006a0:	4603      	mov	r3, r0
 80006a2:	60bb      	str	r3, [r7, #8]
			HAL_ADC_Stop(&hadc2);
 80006a4:	483c      	ldr	r0, [pc, #240]	; (8000798 <scanJoystick+0x13c>)
 80006a6:	f001 fed3 	bl	8002450 <HAL_ADC_Stop>

			if (X < joystickHome1.row - joystickThreshold)
 80006aa:	4b3c      	ldr	r3, [pc, #240]	; (800079c <scanJoystick+0x140>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	da01      	bge.n	80006be <scanJoystick+0x62>
				return left;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e065      	b.n	800078a <scanJoystick+0x12e>
			if (X > joystickHome1.row + joystickThreshold)
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <scanJoystick+0x140>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006c6:	4413      	add	r3, r2
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dd01      	ble.n	80006d2 <scanJoystick+0x76>
				return right;
 80006ce:	2302      	movs	r3, #2
 80006d0:	e05b      	b.n	800078a <scanJoystick+0x12e>
			if (Y < joystickHome1.col - joystickThreshold)
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <scanJoystick+0x140>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	429a      	cmp	r2, r3
 80006e0:	da01      	bge.n	80006e6 <scanJoystick+0x8a>
				return down;
 80006e2:	2303      	movs	r3, #3
 80006e4:	e051      	b.n	800078a <scanJoystick+0x12e>
			if (Y > joystickHome1.col + joystickThreshold)
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <scanJoystick+0x140>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006ee:	4413      	add	r3, r2
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dd47      	ble.n	8000786 <scanJoystick+0x12a>
				return up;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e047      	b.n	800078a <scanJoystick+0x12e>
		} else {
			HAL_ADC_Start(&hadc1);
 80006fa:	4826      	ldr	r0, [pc, #152]	; (8000794 <scanJoystick+0x138>)
 80006fc:	f001 fdfa 	bl	80022f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000700:	2164      	movs	r1, #100	; 0x64
 8000702:	4824      	ldr	r0, [pc, #144]	; (8000794 <scanJoystick+0x138>)
 8000704:	f001 fed0 	bl	80024a8 <HAL_ADC_PollForConversion>
			X = HAL_ADC_GetValue(&hadc1);
 8000708:	4822      	ldr	r0, [pc, #136]	; (8000794 <scanJoystick+0x138>)
 800070a:	f001 ffc7 	bl	800269c <HAL_ADC_GetValue>
 800070e:	4603      	mov	r3, r0
 8000710:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc1);
 8000712:	4820      	ldr	r0, [pc, #128]	; (8000794 <scanJoystick+0x138>)
 8000714:	f001 fe9c 	bl	8002450 <HAL_ADC_Stop>

			HAL_ADC_Start(&hadc2);
 8000718:	481f      	ldr	r0, [pc, #124]	; (8000798 <scanJoystick+0x13c>)
 800071a:	f001 fdeb 	bl	80022f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 100);
 800071e:	2164      	movs	r1, #100	; 0x64
 8000720:	481d      	ldr	r0, [pc, #116]	; (8000798 <scanJoystick+0x13c>)
 8000722:	f001 fec1 	bl	80024a8 <HAL_ADC_PollForConversion>
			Y = HAL_ADC_GetValue(&hadc2);
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <scanJoystick+0x13c>)
 8000728:	f001 ffb8 	bl	800269c <HAL_ADC_GetValue>
 800072c:	4603      	mov	r3, r0
 800072e:	60bb      	str	r3, [r7, #8]
			HAL_ADC_Stop(&hadc2);
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <scanJoystick+0x13c>)
 8000732:	f001 fe8d 	bl	8002450 <HAL_ADC_Stop>

#ifdef SERIAL_DEBUG
			// TODO SERIAL DEBUG
#endif

			if (X < joystickHome2.row - joystickThreshold)
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <scanJoystick+0x144>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	da01      	bge.n	800074a <scanJoystick+0xee>
				return right;
 8000746:	2302      	movs	r3, #2
 8000748:	e01f      	b.n	800078a <scanJoystick+0x12e>
			if (X > joystickHome2.row + joystickThreshold)
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <scanJoystick+0x144>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000752:	4413      	add	r3, r2
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	429a      	cmp	r2, r3
 8000758:	dd01      	ble.n	800075e <scanJoystick+0x102>
				return left;
 800075a:	2304      	movs	r3, #4
 800075c:	e015      	b.n	800078a <scanJoystick+0x12e>
			if (Y < joystickHome2.col - joystickThreshold)
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <scanJoystick+0x144>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	429a      	cmp	r2, r3
 800076c:	da01      	bge.n	8000772 <scanJoystick+0x116>
				return up;
 800076e:	2301      	movs	r3, #1
 8000770:	e00b      	b.n	800078a <scanJoystick+0x12e>
			if (Y > joystickHome2.col + joystickThreshold)
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <scanJoystick+0x144>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800077a:	4413      	add	r3, r2
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	429a      	cmp	r2, r3
 8000780:	dd01      	ble.n	8000786 <scanJoystick+0x12a>
				return down;
 8000782:	2303      	movs	r3, #3
 8000784:	e001      	b.n	800078a <scanJoystick+0x12e>
		}

		return -1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000360 	.word	0x20000360
 8000798:	20000330 	.word	0x20000330
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	20000094 	.word	0x20000094

080007a4 <SnakeLoop>:
static int moveInterval; // = 400;

static uint8_t gameboard[ROW_NUM][COL_NUM]; // = {}; // ігрове поле

void SnakeLoop()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	generateFood(); // if there is no food, generate one
 80007a8:	f000 f8d0 	bl	800094c <generateFood>

	if (HAL_GetTick() >= time + 200)
 80007ac:	f001 fc9e 	bl	80020ec <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <SnakeLoop+0xdc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	33c8      	adds	r3, #200	; 0xc8
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d327      	bcc.n	800080c <SnakeLoop+0x68>
	{
		setLEDM(food.row, food.col, !food_state, true);
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <SnakeLoop+0xe0>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <SnakeLoop+0xe0>)
 80007c2:	6859      	ldr	r1, [r3, #4]
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <SnakeLoop+0xe4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f083 0301 	eor.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	2301      	movs	r3, #1
 80007e0:	f001 f9ba 	bl	8001b58 <setLEDM>
		time = HAL_GetTick();
 80007e4:	f001 fc82 	bl	80020ec <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SnakeLoop+0xdc>)
 80007ec:	601a      	str	r2, [r3, #0]
		food_state = !food_state;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <SnakeLoop+0xe4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf14      	ite	ne
 80007f6:	2301      	movne	r3, #1
 80007f8:	2300      	moveq	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SnakeLoop+0xe4>)
 800080a:	701a      	strb	r2, [r3, #0]
	}

	if (!one_player)
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SnakeLoop+0xe8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f083 0301 	eor.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00a      	beq.n	8000830 <SnakeLoop+0x8c>
	{
		// 2 players
		do
		{
			SnakeScanJoystick(); // watches joystick movements
 800081a:	f000 f843 	bl	80008a4 <SnakeScanJoystick>
		}
		while (snake1Direction == 0 || snake2Direction == 0);
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <SnakeLoop+0xec>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <SnakeLoop+0x76>
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <SnakeLoop+0xf0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f5      	beq.n	800081a <SnakeLoop+0x76>
 800082e:	e005      	b.n	800083c <SnakeLoop+0x98>
	}
	else // 1 player
	{
		do
		{
			SnakeScanJoystick(); // watches joystick movements
 8000830:	f000 f838 	bl	80008a4 <SnakeScanJoystick>
		}
		while (snake1Direction == 0);
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <SnakeLoop+0xec>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <SnakeLoop+0x8c>
	}

	calculateSnake(); // calculates snake parameters
 800083c:	f000 faf8 	bl	8000e30 <calculateSnake>
	handleGameStates();
 8000840:	f000 fcc2 	bl	80011c8 <handleGameStates>

	move++;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <SnakeLoop+0xf4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <SnakeLoop+0xf4>)
 800084c:	6013      	str	r3, [r2, #0]

	if (move % 20 == 0) moveInterval -= 10;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <SnakeLoop+0xf4>)
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <SnakeLoop+0xf8>)
 8000854:	fb83 2301 	smull	r2, r3, r3, r1
 8000858:	10da      	asrs	r2, r3, #3
 800085a:	17cb      	asrs	r3, r1, #31
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	1aca      	subs	r2, r1, r3
 8000868:	2a00      	cmp	r2, #0
 800086a:	d104      	bne.n	8000876 <SnakeLoop+0xd2>
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <SnakeLoop+0xfc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b0a      	subs	r3, #10
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <SnakeLoop+0xfc>)
 8000874:	6013      	str	r3, [r2, #0]

	delay(40);
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f001 fc42 	bl	8002100 <HAL_Delay>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000032c 	.word	0x2000032c
 8000884:	200000b8 	.word	0x200000b8
 8000888:	200000a1 	.word	0x200000a1
 800088c:	200000a0 	.word	0x200000a0
 8000890:	200000c8 	.word	0x200000c8
 8000894:	200000c9 	.word	0x200000c9
 8000898:	200000a4 	.word	0x200000a4
 800089c:	66666667 	.word	0x66666667
 80008a0:	200000cc 	.word	0x200000cc

080008a4 <SnakeScanJoystick>:

void SnakeScanJoystick()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
		}
		while (!(digitalRead(joystick1but) == LOW && digitalRead(joystick2but) == LOW));
	}
#endif

	char previousDirection1 = snake1Direction; // зберегти останній напрям
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <SnakeScanJoystick+0x98>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	73fb      	strb	r3, [r7, #15]
	char previousDirection2 = snake2Direction;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <SnakeScanJoystick+0x9c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	73bb      	strb	r3, [r7, #14]
	unsigned long timestamp = HAL_GetTick(); // зберегти поточний час
 80008b6:	f001 fc19 	bl	80020ec <HAL_GetTick>
 80008ba:	60b8      	str	r0, [r7, #8]

	do
	{
		char Direction1 = scanJoystick(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fecd 	bl	800065c <scanJoystick>
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

		if (!((Direction1 + 2 == previousDirection1 || Direction1 - 2 == previousDirection1) && previousDirection1
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	1c9a      	adds	r2, r3, #2
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d004      	beq.n	80008da <SnakeScanJoystick+0x36>
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	1e9a      	subs	r2, r3, #2
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d102      	bne.n	80008e0 <SnakeScanJoystick+0x3c>
			!= 0) && Direction1 != -1) // ігнорувати поворот на 180 градусів
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <SnakeScanJoystick+0x42>
			snake1Direction = Direction1;
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <SnakeScanJoystick+0x98>)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	7013      	strb	r3, [r2, #0]

		if (!one_player)
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <SnakeScanJoystick+0xa0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d014      	beq.n	800091e <SnakeScanJoystick+0x7a>
		{
			char Direction2 = scanJoystick(2);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f7ff feb1 	bl	800065c <scanJoystick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	71bb      	strb	r3, [r7, #6]

			if (!((Direction2 + 2 == previousDirection2 || Direction2 - 2 == previousDirection2) &&
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	1c9a      	adds	r2, r3, #2
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	429a      	cmp	r2, r3
 8000906:	d004      	beq.n	8000912 <SnakeScanJoystick+0x6e>
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	1e9a      	subs	r2, r3, #2
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	429a      	cmp	r2, r3
 8000910:	d102      	bne.n	8000918 <SnakeScanJoystick+0x74>
				previousDirection2 != 0) && Direction2 != -1) // ігнорувати поворот на 180 градусів
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <SnakeScanJoystick+0x7a>
				snake2Direction = Direction2;
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <SnakeScanJoystick+0x9c>)
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	7013      	strb	r3, [r2, #0]
		}
	}
	while (HAL_GetTick() < timestamp + moveInterval);
 800091e:	f001 fbe5 	bl	80020ec <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <SnakeScanJoystick+0xa4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	440b      	add	r3, r1
 800092e:	429a      	cmp	r2, r3
 8000930:	d3c4      	bcc.n	80008bc <SnakeScanJoystick+0x18>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000c8 	.word	0x200000c8
 8000940:	200000c9 	.word	0x200000c9
 8000944:	200000a0 	.word	0x200000a0
 8000948:	200000cc 	.word	0x200000cc

0800094c <generateFood>:

void generateFood()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	if (food.row == -1 || food.col == -1) // немає їжі на полі
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <generateFood+0xc8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d004      	beq.n	8000964 <generateFood+0x18>
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <generateFood+0xc8>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000962:	d155      	bne.n	8000a10 <generateFood+0xc4>
	{
		if (snake1Length >= 64)
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <generateFood+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b3f      	cmp	r3, #63	; 0x3f
 800096a:	dd03      	ble.n	8000974 <generateFood+0x28>
		{
			win1 = true;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <generateFood+0xd0>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
			return;
 8000972:	e04d      	b.n	8000a10 <generateFood+0xc4>
		}
		if (snake2Length >= 64)
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <generateFood+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b3f      	cmp	r3, #63	; 0x3f
 800097a:	dd03      	ble.n	8000984 <generateFood+0x38>
		{
			win2 = true;
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <generateFood+0xd8>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
			return;
 8000982:	e045      	b.n	8000a10 <generateFood+0xc4>
		}

		do // генерування випадкових коорд, доки вони не в межах поля
		{
			food.col = rand() % COL_NUM;
 8000984:	f003 fb44 	bl	8004010 <rand>
 8000988:	4601      	mov	r1, r0
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <generateFood+0xdc>)
 800098c:	fb83 2301 	smull	r2, r3, r3, r1
 8000990:	109a      	asrs	r2, r3, #2
 8000992:	17cb      	asrs	r3, r1, #31
 8000994:	1ad2      	subs	r2, r2, r3
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	1aca      	subs	r2, r1, r3
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <generateFood+0xc8>)
 80009a2:	605a      	str	r2, [r3, #4]
			food.row = rand() % ROW_NUM;
 80009a4:	f003 fb34 	bl	8004010 <rand>
 80009a8:	4601      	mov	r1, r0
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <generateFood+0xdc>)
 80009ac:	fb83 2301 	smull	r2, r3, r3, r1
 80009b0:	109a      	asrs	r2, r3, #2
 80009b2:	17cb      	asrs	r3, r1, #31
 80009b4:	1ad2      	subs	r2, r2, r3
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	1aca      	subs	r2, r1, r3
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <generateFood+0xc8>)
 80009c2:	601a      	str	r2, [r3, #0]
		}
		while (gameboard[food.row][food.col] > 0 || (food.row < 8 && (food.col < 8 || food.col > 15)) || (food.row > 15
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <generateFood+0xc8>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <generateFood+0xc8>)
 80009ca:	6859      	ldr	r1, [r3, #4]
 80009cc:	4817      	ldr	r0, [pc, #92]	; (8000a2c <generateFood+0xe0>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4403      	add	r3, r0
 80009d8:	440b      	add	r3, r1
 80009da:	781b      	ldrb	r3, [r3, #0]
			&& (food.col < 8 || food.col > 15)));
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1d1      	bne.n	8000984 <generateFood+0x38>
		while (gameboard[food.row][food.col] > 0 || (food.row < 8 && (food.col < 8 || food.col > 15)) || (food.row > 15
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <generateFood+0xc8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	dc07      	bgt.n	80009f8 <generateFood+0xac>
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <generateFood+0xc8>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	ddc9      	ble.n	8000984 <generateFood+0x38>
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <generateFood+0xc8>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	dcc5      	bgt.n	8000984 <generateFood+0x38>
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <generateFood+0xc8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	dd07      	ble.n	8000a10 <generateFood+0xc4>
			&& (food.col < 8 || food.col > 15)));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <generateFood+0xc8>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b07      	cmp	r3, #7
 8000a06:	ddbd      	ble.n	8000984 <generateFood+0x38>
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <generateFood+0xc8>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	dcb9      	bgt.n	8000984 <generateFood+0x38>
	}
}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000b8 	.word	0x200000b8
 8000a18:	200000c0 	.word	0x200000c0
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	200000c4 	.word	0x200000c4
 8000a24:	2000009e 	.word	0x2000009e
 8000a28:	2aaaaaab 	.word	0x2aaaaaab
 8000a2c:	200000d0 	.word	0x200000d0

08000a30 <fixEdge>:

void fixEdge()
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	if (snake1.col < 8)
 8000a34:	4b85      	ldr	r3, [pc, #532]	; (8000c4c <fixEdge+0x21c>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	dc3f      	bgt.n	8000abc <fixEdge+0x8c>
	{
		// ліва част
		if (snake1.row < 8)
 8000a3c:	4b83      	ldr	r3, [pc, #524]	; (8000c4c <fixEdge+0x21c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	dc19      	bgt.n	8000a78 <fixEdge+0x48>
		{
			// I сектор
			if (snake1Direction == up)
 8000a44:	4b82      	ldr	r3, [pc, #520]	; (8000c50 <fixEdge+0x220>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10a      	bne.n	8000a62 <fixEdge+0x32>
			{
				snake1.row = snake1.col;
 8000a4c:	4b7f      	ldr	r3, [pc, #508]	; (8000c4c <fixEdge+0x21c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4a7e      	ldr	r2, [pc, #504]	; (8000c4c <fixEdge+0x21c>)
 8000a52:	6013      	str	r3, [r2, #0]
				snake1.col = 8;
 8000a54:	4b7d      	ldr	r3, [pc, #500]	; (8000c4c <fixEdge+0x21c>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	605a      	str	r2, [r3, #4]
				snake1Direction = right;
 8000a5a:	4b7d      	ldr	r3, [pc, #500]	; (8000c50 <fixEdge+0x220>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e06f      	b.n	8000b42 <fixEdge+0x112>
			}
			else
			{
				snake1.col = snake1.row;
 8000a62:	4b7a      	ldr	r3, [pc, #488]	; (8000c4c <fixEdge+0x21c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a79      	ldr	r2, [pc, #484]	; (8000c4c <fixEdge+0x21c>)
 8000a68:	6053      	str	r3, [r2, #4]
				snake1.row = 8;
 8000a6a:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <fixEdge+0x21c>)
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	601a      	str	r2, [r3, #0]
				snake1Direction = down;
 8000a70:	4b77      	ldr	r3, [pc, #476]	; (8000c50 <fixEdge+0x220>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e064      	b.n	8000b42 <fixEdge+0x112>
			}
		}
		else if (snake1.row > 15)
 8000a78:	4b74      	ldr	r3, [pc, #464]	; (8000c4c <fixEdge+0x21c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	dd60      	ble.n	8000b42 <fixEdge+0x112>
		{
			// II сектор
			if (snake1Direction == down)
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <fixEdge+0x220>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d10c      	bne.n	8000aa2 <fixEdge+0x72>
			{
				snake1.row = 23 - snake1.col;
 8000a88:	4b70      	ldr	r3, [pc, #448]	; (8000c4c <fixEdge+0x21c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f1c3 0317 	rsb	r3, r3, #23
 8000a90:	4a6e      	ldr	r2, [pc, #440]	; (8000c4c <fixEdge+0x21c>)
 8000a92:	6013      	str	r3, [r2, #0]
				snake1.col = 8;
 8000a94:	4b6d      	ldr	r3, [pc, #436]	; (8000c4c <fixEdge+0x21c>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	605a      	str	r2, [r3, #4]
				snake1Direction = right;
 8000a9a:	4b6d      	ldr	r3, [pc, #436]	; (8000c50 <fixEdge+0x220>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e04f      	b.n	8000b42 <fixEdge+0x112>
			}
			else
			{
				snake1.col = 23 - snake1.row;
 8000aa2:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <fixEdge+0x21c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1c3 0317 	rsb	r3, r3, #23
 8000aaa:	4a68      	ldr	r2, [pc, #416]	; (8000c4c <fixEdge+0x21c>)
 8000aac:	6053      	str	r3, [r2, #4]
				snake1.row = 15;
 8000aae:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <fixEdge+0x21c>)
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	601a      	str	r2, [r3, #0]
				snake1Direction = up;
 8000ab4:	4b66      	ldr	r3, [pc, #408]	; (8000c50 <fixEdge+0x220>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e042      	b.n	8000b42 <fixEdge+0x112>
			}
		}
	}
	else if (snake1.col > 15)
 8000abc:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <fixEdge+0x21c>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	dd3e      	ble.n	8000b42 <fixEdge+0x112>
	{
		// права част
		if (snake1.row < 8)
 8000ac4:	4b61      	ldr	r3, [pc, #388]	; (8000c4c <fixEdge+0x21c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	dc1d      	bgt.n	8000b08 <fixEdge+0xd8>
		{
			// III сектор
			if (snake1Direction == right)
 8000acc:	4b60      	ldr	r3, [pc, #384]	; (8000c50 <fixEdge+0x220>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d10c      	bne.n	8000aee <fixEdge+0xbe>
			{
				snake1.col = 23 - snake1.row;
 8000ad4:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <fixEdge+0x21c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1c3 0317 	rsb	r3, r3, #23
 8000adc:	4a5b      	ldr	r2, [pc, #364]	; (8000c4c <fixEdge+0x21c>)
 8000ade:	6053      	str	r3, [r2, #4]
				snake1.row = 8;
 8000ae0:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <fixEdge+0x21c>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	601a      	str	r2, [r3, #0]
				snake1Direction = down;
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <fixEdge+0x220>)
 8000ae8:	2203      	movs	r2, #3
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e029      	b.n	8000b42 <fixEdge+0x112>
			}
			else
			{
				snake1.row = 23 - snake1.col;
 8000aee:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <fixEdge+0x21c>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f1c3 0317 	rsb	r3, r3, #23
 8000af6:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <fixEdge+0x21c>)
 8000af8:	6013      	str	r3, [r2, #0]
				snake1.col = 15;
 8000afa:	4b54      	ldr	r3, [pc, #336]	; (8000c4c <fixEdge+0x21c>)
 8000afc:	220f      	movs	r2, #15
 8000afe:	605a      	str	r2, [r3, #4]
				snake1Direction = left;
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <fixEdge+0x220>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e01c      	b.n	8000b42 <fixEdge+0x112>
			}
		}
		else if (snake1.row > 15)
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <fixEdge+0x21c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	dd18      	ble.n	8000b42 <fixEdge+0x112>
		{
			// IV сектор
			if (snake1Direction == down)
 8000b10:	4b4f      	ldr	r3, [pc, #316]	; (8000c50 <fixEdge+0x220>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d10a      	bne.n	8000b2e <fixEdge+0xfe>
			{
				snake1.row = snake1.col;
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <fixEdge+0x21c>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a4b      	ldr	r2, [pc, #300]	; (8000c4c <fixEdge+0x21c>)
 8000b1e:	6013      	str	r3, [r2, #0]
				snake1.col = 15;
 8000b20:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <fixEdge+0x21c>)
 8000b22:	220f      	movs	r2, #15
 8000b24:	605a      	str	r2, [r3, #4]
				snake1Direction = left;
 8000b26:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <fixEdge+0x220>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e009      	b.n	8000b42 <fixEdge+0x112>
			}
			else
			{
				snake1.col = snake1.row;
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <fixEdge+0x21c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <fixEdge+0x21c>)
 8000b34:	6053      	str	r3, [r2, #4]
				snake1.row = 15;
 8000b36:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <fixEdge+0x21c>)
 8000b38:	220f      	movs	r2, #15
 8000b3a:	601a      	str	r2, [r3, #0]
				snake1Direction = up;
 8000b3c:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <fixEdge+0x220>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (!one_player)
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <fixEdge+0x224>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8091 	beq.w	8000c74 <fixEdge+0x244>
	{
		if (snake2.col < 8)
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <fixEdge+0x228>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	dc3f      	bgt.n	8000bda <fixEdge+0x1aa>
		{
			// ліва част
			if (snake2.row < 8)
 8000b5a:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <fixEdge+0x228>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dc19      	bgt.n	8000b96 <fixEdge+0x166>
			{
				// I сектор
				if (snake2Direction == up)
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <fixEdge+0x22c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d10a      	bne.n	8000b80 <fixEdge+0x150>
				{
					snake2.row = snake2.col;
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <fixEdge+0x228>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a3a      	ldr	r2, [pc, #232]	; (8000c58 <fixEdge+0x228>)
 8000b70:	6013      	str	r3, [r2, #0]
					snake2.col = 8;
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <fixEdge+0x228>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	605a      	str	r2, [r3, #4]
					snake2Direction = right;
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <fixEdge+0x22c>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e079      	b.n	8000c74 <fixEdge+0x244>
				}
				else
				{
					snake2.col = snake2.row;
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <fixEdge+0x228>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <fixEdge+0x228>)
 8000b86:	6053      	str	r3, [r2, #4]
					snake2.row = 8;
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <fixEdge+0x228>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	601a      	str	r2, [r3, #0]
					snake2Direction = down;
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <fixEdge+0x22c>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e06e      	b.n	8000c74 <fixEdge+0x244>
				}
			}
			else if (snake2.row > 15)
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <fixEdge+0x228>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	dd6a      	ble.n	8000c74 <fixEdge+0x244>
			{
				// II сектор
				if (snake2Direction == down)
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <fixEdge+0x22c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d10c      	bne.n	8000bc0 <fixEdge+0x190>
				{
					snake2.row = 23 - snake2.col;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <fixEdge+0x228>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f1c3 0317 	rsb	r3, r3, #23
 8000bae:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <fixEdge+0x228>)
 8000bb0:	6013      	str	r3, [r2, #0]
					snake2.col = 8;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <fixEdge+0x228>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	605a      	str	r2, [r3, #4]
					snake2Direction = right;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <fixEdge+0x22c>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e059      	b.n	8000c74 <fixEdge+0x244>
				}
				else
				{
					snake2.col = 23 - snake2.row;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <fixEdge+0x228>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1c3 0317 	rsb	r3, r3, #23
 8000bc8:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <fixEdge+0x228>)
 8000bca:	6053      	str	r3, [r2, #4]
					snake2.row = 15;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <fixEdge+0x228>)
 8000bce:	220f      	movs	r2, #15
 8000bd0:	601a      	str	r2, [r3, #0]
					snake2Direction = up;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <fixEdge+0x22c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e04c      	b.n	8000c74 <fixEdge+0x244>
				}
			}
		}
		else if (snake2.col > 15)
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <fixEdge+0x228>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	dd48      	ble.n	8000c74 <fixEdge+0x244>
		{
			// права част
			if (snake2.row < 8)
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <fixEdge+0x228>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	dc1d      	bgt.n	8000c26 <fixEdge+0x1f6>
			{
				// III сектор
				if (snake2Direction == right)
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <fixEdge+0x22c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d10c      	bne.n	8000c0c <fixEdge+0x1dc>
				{
					snake2.col = 23 - snake2.row;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <fixEdge+0x228>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f1c3 0317 	rsb	r3, r3, #23
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <fixEdge+0x228>)
 8000bfc:	6053      	str	r3, [r2, #4]
					snake2.row = 8;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <fixEdge+0x228>)
 8000c00:	2208      	movs	r2, #8
 8000c02:	601a      	str	r2, [r3, #0]
					snake2Direction = down;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <fixEdge+0x22c>)
 8000c06:	2203      	movs	r2, #3
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e033      	b.n	8000c74 <fixEdge+0x244>
				}
				else
				{
					snake2.row = 23 - snake2.col;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <fixEdge+0x228>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f1c3 0317 	rsb	r3, r3, #23
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <fixEdge+0x228>)
 8000c16:	6013      	str	r3, [r2, #0]
					snake2.col = 15;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <fixEdge+0x228>)
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	605a      	str	r2, [r3, #4]
					snake2Direction = left;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <fixEdge+0x22c>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e026      	b.n	8000c74 <fixEdge+0x244>
				}
			}
			else if (snake2.row > 15)
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <fixEdge+0x228>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	dd22      	ble.n	8000c74 <fixEdge+0x244>
			{
				// IV сектор
				if (snake2Direction == down)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <fixEdge+0x22c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d114      	bne.n	8000c60 <fixEdge+0x230>
				{
					snake2.row = snake2.col;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <fixEdge+0x228>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <fixEdge+0x228>)
 8000c3c:	6013      	str	r3, [r2, #0]
					snake2.col = 15;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <fixEdge+0x228>)
 8000c40:	220f      	movs	r2, #15
 8000c42:	605a      	str	r2, [r3, #4]
					snake2Direction = left;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <fixEdge+0x22c>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e013      	b.n	8000c74 <fixEdge+0x244>
 8000c4c:	200000a8 	.word	0x200000a8
 8000c50:	200000c8 	.word	0x200000c8
 8000c54:	200000a0 	.word	0x200000a0
 8000c58:	200000b0 	.word	0x200000b0
 8000c5c:	200000c9 	.word	0x200000c9
				}
				else
				{
					snake2.col = snake2.row;
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <fixEdge+0x2ec>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <fixEdge+0x2ec>)
 8000c66:	6053      	str	r3, [r2, #4]
					snake2.row = 15;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <fixEdge+0x2ec>)
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	601a      	str	r2, [r3, #0]
					snake2Direction = up;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <fixEdge+0x2f0>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
		}
	}

	////////////////////

	snake1.col < 0 ? snake1.col += COL_NUM : 0;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <fixEdge+0x2f4>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da04      	bge.n	8000c86 <fixEdge+0x256>
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <fixEdge+0x2f4>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	3318      	adds	r3, #24
 8000c82:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <fixEdge+0x2f4>)
 8000c84:	6053      	str	r3, [r2, #4]
	snake1.col > COL_NUM - 1 ? snake1.col -= COL_NUM : 0;
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <fixEdge+0x2f4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b17      	cmp	r3, #23
 8000c8c:	dd04      	ble.n	8000c98 <fixEdge+0x268>
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <fixEdge+0x2f4>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	3b18      	subs	r3, #24
 8000c94:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <fixEdge+0x2f4>)
 8000c96:	6053      	str	r3, [r2, #4]
	snake1.row < 0 ? snake1.row += ROW_NUM : 0;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <fixEdge+0x2f4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da04      	bge.n	8000caa <fixEdge+0x27a>
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <fixEdge+0x2f4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3318      	adds	r3, #24
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <fixEdge+0x2f4>)
 8000ca8:	6013      	str	r3, [r2, #0]
	snake1.row > ROW_NUM - 1 ? snake1.row -= ROW_NUM : 0;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <fixEdge+0x2f4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b17      	cmp	r3, #23
 8000cb0:	dd04      	ble.n	8000cbc <fixEdge+0x28c>
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <fixEdge+0x2f4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3b18      	subs	r3, #24
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <fixEdge+0x2f4>)
 8000cba:	6013      	str	r3, [r2, #0]

	if (!one_player)
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <fixEdge+0x2f8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f083 0301 	eor.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d023      	beq.n	8000d12 <fixEdge+0x2e2>
	{
		snake2.col < 0 ? snake2.col += COL_NUM : 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <fixEdge+0x2ec>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da04      	bge.n	8000cdc <fixEdge+0x2ac>
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <fixEdge+0x2ec>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <fixEdge+0x2ec>)
 8000cda:	6053      	str	r3, [r2, #4]
		snake2.col > COL_NUM - 1 ? snake2.col -= COL_NUM : 0;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <fixEdge+0x2ec>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b17      	cmp	r3, #23
 8000ce2:	dd04      	ble.n	8000cee <fixEdge+0x2be>
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <fixEdge+0x2ec>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	3b18      	subs	r3, #24
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <fixEdge+0x2ec>)
 8000cec:	6053      	str	r3, [r2, #4]
		snake2.row < 0 ? snake2.row += ROW_NUM : 0;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <fixEdge+0x2ec>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da04      	bge.n	8000d00 <fixEdge+0x2d0>
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <fixEdge+0x2ec>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3318      	adds	r3, #24
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <fixEdge+0x2ec>)
 8000cfe:	6013      	str	r3, [r2, #0]
		snake2.row > ROW_NUM - 1 ? snake2.row -= ROW_NUM : 0;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <fixEdge+0x2ec>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b17      	cmp	r3, #23
 8000d06:	dd04      	ble.n	8000d12 <fixEdge+0x2e2>
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <fixEdge+0x2ec>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b18      	subs	r3, #24
 8000d0e:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <fixEdge+0x2ec>)
 8000d10:	6013      	str	r3, [r2, #0]
	}
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200000b0 	.word	0x200000b0
 8000d20:	200000c9 	.word	0x200000c9
 8000d24:	200000a8 	.word	0x200000a8
 8000d28:	200000a0 	.word	0x200000a0

08000d2c <initialize>:

void initialize()
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	win1 = false;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <initialize+0xc4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
	gameOver1 = false;
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <initialize+0xc8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
	win2 = false;
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <initialize+0xcc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	gameOver2 = false;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <initialize+0xd0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
	one_player = true;
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <initialize+0xd4>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
	food_state = false;
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <initialize+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
	move = 0; // номер ходу
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <initialize+0xdc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]

	food.row = -1;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <initialize+0xe0>)
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	601a      	str	r2, [r3, #0]
	food.col = -1; // коорд їжі
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <initialize+0xe0>)
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	605a      	str	r2, [r3, #4]
	snake1Length = initialSnakeLength; // довжина 1 змії
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <initialize+0xe4>)
 8000d70:	601a      	str	r2, [r3, #0]
	snake2Length = initialSnakeLength; // довжина 2 змії
 8000d72:	2303      	movs	r3, #3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <initialize+0xe8>)
 8000d78:	601a      	str	r2, [r3, #0]
	snake1Direction = 0,
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <initialize+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	snake2Direction = 0; // напрям змії (0 - змія не рухається)
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <initialize+0xf0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
	moveInterval = 400;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <initialize+0xf4>)
 8000d88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d8c:	601a      	str	r2, [r3, #0]

	time = 0;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <initialize+0xf8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
	food_state = true;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <initialize+0xd8>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]

	snake1.row = 20; // початкове полож 1 гравця
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <initialize+0xfc>)
 8000d9c:	2214      	movs	r2, #20
 8000d9e:	601a      	str	r2, [r3, #0]
	snake1.col = 11;
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <initialize+0xfc>)
 8000da2:	220b      	movs	r2, #11
 8000da4:	605a      	str	r2, [r3, #4]

	if (!one_player)
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <initialize+0xd4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	f083 0301 	eor.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <initialize+0x96>
	{
		snake2.row = 3; // початкове полож 2 гравця
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <initialize+0x100>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	601a      	str	r2, [r3, #0]
		snake2.col = 11;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <initialize+0x100>)
 8000dbc:	220b      	movs	r2, #11
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	e00a      	b.n	8000dd8 <initialize+0xac>
	}
	else
	{
		snake2.row = -1;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <initialize+0x100>)
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	601a      	str	r2, [r3, #0]
		snake2.col = -1;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <initialize+0x100>)
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	605a      	str	r2, [r3, #4]
		snake2Direction = -1;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <initialize+0xf0>)
 8000dd4:	22ff      	movs	r2, #255	; 0xff
 8000dd6:	701a      	strb	r2, [r3, #0]
	}

	move = 0;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <initialize+0xdc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
	moveInterval = 400;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <initialize+0xf4>)
 8000de0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000009c 	.word	0x2000009c
 8000df4:	2000009d 	.word	0x2000009d
 8000df8:	2000009e 	.word	0x2000009e
 8000dfc:	2000009f 	.word	0x2000009f
 8000e00:	200000a0 	.word	0x200000a0
 8000e04:	200000a1 	.word	0x200000a1
 8000e08:	200000a4 	.word	0x200000a4
 8000e0c:	200000b8 	.word	0x200000b8
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	200000c4 	.word	0x200000c4
 8000e18:	200000c8 	.word	0x200000c8
 8000e1c:	200000c9 	.word	0x200000c9
 8000e20:	200000cc 	.word	0x200000cc
 8000e24:	2000032c 	.word	0x2000032c
 8000e28:	200000a8 	.word	0x200000a8
 8000e2c:	200000b0 	.word	0x200000b0

08000e30 <calculateSnake>:

void calculateSnake()
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
	switch (snake1Direction)
 8000e36:	4b79      	ldr	r3, [pc, #484]	; (800101c <calculateSnake+0x1ec>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	f200 81af 	bhi.w	80011a0 <calculateSnake+0x370>
 8000e42:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <calculateSnake+0x18>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e59 	.word	0x08000e59
 8000e4c:	08000e79 	.word	0x08000e79
 8000e50:	08000e99 	.word	0x08000e99
 8000e54:	08000eb9 	.word	0x08000eb9
	{
	case up:
		snake1.row--;
 8000e58:	4b71      	ldr	r3, [pc, #452]	; (8001020 <calculateSnake+0x1f0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	4a70      	ldr	r2, [pc, #448]	; (8001020 <calculateSnake+0x1f0>)
 8000e60:	6013      	str	r3, [r2, #0]
		fixEdge();
 8000e62:	f7ff fde5 	bl	8000a30 <fixEdge>
		setLEDM(snake1.row, snake1.col, 1, false);
 8000e66:	4b6e      	ldr	r3, [pc, #440]	; (8001020 <calculateSnake+0x1f0>)
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <calculateSnake+0x1f0>)
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2201      	movs	r2, #1
 8000e72:	f000 fe71 	bl	8001b58 <setLEDM>
		break;
 8000e76:	e02f      	b.n	8000ed8 <calculateSnake+0xa8>

	case right:
		snake1.col++;
 8000e78:	4b69      	ldr	r3, [pc, #420]	; (8001020 <calculateSnake+0x1f0>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a68      	ldr	r2, [pc, #416]	; (8001020 <calculateSnake+0x1f0>)
 8000e80:	6053      	str	r3, [r2, #4]
		fixEdge();
 8000e82:	f7ff fdd5 	bl	8000a30 <fixEdge>
		setLEDM(snake1.row, snake1.col, 1, false);
 8000e86:	4b66      	ldr	r3, [pc, #408]	; (8001020 <calculateSnake+0x1f0>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <calculateSnake+0x1f0>)
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2201      	movs	r2, #1
 8000e92:	f000 fe61 	bl	8001b58 <setLEDM>
		break;
 8000e96:	e01f      	b.n	8000ed8 <calculateSnake+0xa8>

	case down:
		snake1.row++;
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <calculateSnake+0x1f0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a60      	ldr	r2, [pc, #384]	; (8001020 <calculateSnake+0x1f0>)
 8000ea0:	6013      	str	r3, [r2, #0]
		fixEdge();
 8000ea2:	f7ff fdc5 	bl	8000a30 <fixEdge>
		setLEDM(snake1.row, snake1.col, 1, false);
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <calculateSnake+0x1f0>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <calculateSnake+0x1f0>)
 8000eac:	6859      	ldr	r1, [r3, #4]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f000 fe51 	bl	8001b58 <setLEDM>
		break;
 8000eb6:	e00f      	b.n	8000ed8 <calculateSnake+0xa8>

	case left:
		snake1.col--;
 8000eb8:	4b59      	ldr	r3, [pc, #356]	; (8001020 <calculateSnake+0x1f0>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a58      	ldr	r2, [pc, #352]	; (8001020 <calculateSnake+0x1f0>)
 8000ec0:	6053      	str	r3, [r2, #4]
		fixEdge();
 8000ec2:	f7ff fdb5 	bl	8000a30 <fixEdge>
		setLEDM(snake1.row, snake1.col, 1, false);
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <calculateSnake+0x1f0>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	4b55      	ldr	r3, [pc, #340]	; (8001020 <calculateSnake+0x1f0>)
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f000 fe41 	bl	8001b58 <setLEDM>
		break;
 8000ed6:	bf00      	nop

	default: // if the snake is not moving, exit
		return;
	}

	if ((gameboard[snake1.row][snake1.col] > 1) && snake1Direction != 0) // якщо вже щось є на даній позиції
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <calculateSnake+0x1f0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b50      	ldr	r3, [pc, #320]	; (8001020 <calculateSnake+0x1f0>)
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	4850      	ldr	r0, [pc, #320]	; (8001024 <calculateSnake+0x1f4>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4403      	add	r3, r0
 8000eec:	440b      	add	r3, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d907      	bls.n	8000f04 <calculateSnake+0xd4>
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <calculateSnake+0x1ec>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <calculateSnake+0xd4>
	{
		gameOver1 = true;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <calculateSnake+0x1f8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
		return;
 8000f02:	e150      	b.n	80011a6 <calculateSnake+0x376>
	}

	if (!one_player)
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <calculateSnake+0x1fc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8094 	beq.w	800103c <calculateSnake+0x20c>
	{
		if ((snake1.row == snake2.row && snake1.col == snake2.col)) // зіткнення 2 змій
 8000f14:	4b42      	ldr	r3, [pc, #264]	; (8001020 <calculateSnake+0x1f0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b45      	ldr	r3, [pc, #276]	; (8001030 <calculateSnake+0x200>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d109      	bne.n	8000f34 <calculateSnake+0x104>
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <calculateSnake+0x1f0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <calculateSnake+0x200>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d103      	bne.n	8000f34 <calculateSnake+0x104>
		{
			gameOver1 = true;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <calculateSnake+0x1f8>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
			return;
 8000f32:	e138      	b.n	80011a6 <calculateSnake+0x376>
		}

		switch (snake2Direction)
 8000f34:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <calculateSnake+0x204>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	f200 8132 	bhi.w	80011a4 <calculateSnake+0x374>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <calculateSnake+0x118>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f79 	.word	0x08000f79
 8000f50:	08000f99 	.word	0x08000f99
 8000f54:	08000fb9 	.word	0x08000fb9
		{
		case up:
			snake2.row--;
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <calculateSnake+0x200>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <calculateSnake+0x200>)
 8000f60:	6013      	str	r3, [r2, #0]
			fixEdge();
 8000f62:	f7ff fd65 	bl	8000a30 <fixEdge>
			setLEDM(snake2.row, snake2.col, 1, false);
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <calculateSnake+0x200>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <calculateSnake+0x200>)
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2201      	movs	r2, #1
 8000f72:	f000 fdf1 	bl	8001b58 <setLEDM>
			break;
 8000f76:	e02f      	b.n	8000fd8 <calculateSnake+0x1a8>

		case right:
			snake2.col++;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <calculateSnake+0x200>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a2c      	ldr	r2, [pc, #176]	; (8001030 <calculateSnake+0x200>)
 8000f80:	6053      	str	r3, [r2, #4]
			fixEdge();
 8000f82:	f7ff fd55 	bl	8000a30 <fixEdge>
			setLEDM(snake2.row, snake2.col, 1, false);
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <calculateSnake+0x200>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <calculateSnake+0x200>)
 8000f8c:	6859      	ldr	r1, [r3, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2201      	movs	r2, #1
 8000f92:	f000 fde1 	bl	8001b58 <setLEDM>
			break;
 8000f96:	e01f      	b.n	8000fd8 <calculateSnake+0x1a8>

		case down:
			snake2.row++;
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <calculateSnake+0x200>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a24      	ldr	r2, [pc, #144]	; (8001030 <calculateSnake+0x200>)
 8000fa0:	6013      	str	r3, [r2, #0]
			fixEdge();
 8000fa2:	f7ff fd45 	bl	8000a30 <fixEdge>
			setLEDM(snake2.row, snake2.col, 1, false);
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <calculateSnake+0x200>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <calculateSnake+0x200>)
 8000fac:	6859      	ldr	r1, [r3, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f000 fdd1 	bl	8001b58 <setLEDM>
			break;
 8000fb6:	e00f      	b.n	8000fd8 <calculateSnake+0x1a8>

		case left:
			snake2.col--;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <calculateSnake+0x200>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <calculateSnake+0x200>)
 8000fc0:	6053      	str	r3, [r2, #4]
			fixEdge();
 8000fc2:	f7ff fd35 	bl	8000a30 <fixEdge>
			setLEDM(snake2.row, snake2.col, 1, false);
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <calculateSnake+0x200>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <calculateSnake+0x200>)
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f000 fdc1 	bl	8001b58 <setLEDM>
			break;
 8000fd6:	bf00      	nop

		default:
			return;
		}

		if ((gameboard[snake2.row][snake2.col] > 1 || (snake1.row == snake2.row && snake1.col == snake2.col)) &&
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <calculateSnake+0x200>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <calculateSnake+0x200>)
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <calculateSnake+0x1f4>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4403      	add	r3, r0
 8000fec:	440b      	add	r3, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d80b      	bhi.n	800100c <calculateSnake+0x1dc>
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <calculateSnake+0x1f0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <calculateSnake+0x200>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d11d      	bne.n	800103c <calculateSnake+0x20c>
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <calculateSnake+0x1f0>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <calculateSnake+0x200>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d117      	bne.n	800103c <calculateSnake+0x20c>
			snake2Direction != 0)
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <calculateSnake+0x204>)
 800100e:	781b      	ldrb	r3, [r3, #0]
		if ((gameboard[snake2.row][snake2.col] > 1 || (snake1.row == snake2.row && snake1.col == snake2.col)) &&
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <calculateSnake+0x20c>
		{
			// якщо вже щось є на даній позиції або зіткнення з іншою змійкою
			gameOver2 = true;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <calculateSnake+0x208>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
			return;
 800101a:	e0c4      	b.n	80011a6 <calculateSnake+0x376>
 800101c:	200000c8 	.word	0x200000c8
 8001020:	200000a8 	.word	0x200000a8
 8001024:	200000d0 	.word	0x200000d0
 8001028:	2000009d 	.word	0x2000009d
 800102c:	200000a0 	.word	0x200000a0
 8001030:	200000b0 	.word	0x200000b0
 8001034:	200000c9 	.word	0x200000c9
 8001038:	2000009f 	.word	0x2000009f
		}
	}

	int toBuzz = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
	if (snake1.row == food.row && snake1.col == food.col) // їжа зїдена
 8001040:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <calculateSnake+0x37c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <calculateSnake+0x380>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d119      	bne.n	8001080 <calculateSnake+0x250>
 800104c:	4b57      	ldr	r3, [pc, #348]	; (80011ac <calculateSnake+0x37c>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <calculateSnake+0x380>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d113      	bne.n	8001080 <calculateSnake+0x250>
	{
		food.row = -1;
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <calculateSnake+0x380>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	601a      	str	r2, [r3, #0]
		food.col = -1;
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <calculateSnake+0x380>)
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	605a      	str	r2, [r3, #4]

		snake1Length++;
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <calculateSnake+0x384>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <calculateSnake+0x384>)
 8001070:	6013      	str	r3, [r2, #0]
		moveInterval -= 30; // збільш швидкості
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <calculateSnake+0x388>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b1e      	subs	r3, #30
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <calculateSnake+0x388>)
 800107a:	6013      	str	r3, [r2, #0]
		toBuzz = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	607b      	str	r3, [r7, #4]
	}

	if (snake2.row == food.row && snake2.col == food.col) // їжа зїдена
 8001080:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <calculateSnake+0x38c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <calculateSnake+0x380>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d119      	bne.n	80010c0 <calculateSnake+0x290>
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <calculateSnake+0x38c>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <calculateSnake+0x380>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d113      	bne.n	80010c0 <calculateSnake+0x290>
	{
		food.row = -1;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <calculateSnake+0x380>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	601a      	str	r2, [r3, #0]
		food.col = -1;
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <calculateSnake+0x380>)
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	605a      	str	r2, [r3, #4]

		snake2Length++;
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <calculateSnake+0x390>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <calculateSnake+0x390>)
 80010b0:	6013      	str	r3, [r2, #0]
		moveInterval -= 30; // збільш швидкості
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <calculateSnake+0x388>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3b1e      	subs	r3, #30
 80010b8:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <calculateSnake+0x388>)
 80010ba:	6013      	str	r3, [r2, #0]
		toBuzz = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	607b      	str	r3, [r7, #4]
	}

	// встановлення "голови" змії на полі
	gameboard[snake1.row][snake1.col] = snake1Length + 1;
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <calculateSnake+0x384>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <calculateSnake+0x37c>)
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	4938      	ldr	r1, [pc, #224]	; (80011ac <calculateSnake+0x37c>)
 80010cc:	6849      	ldr	r1, [r1, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2dc      	uxtb	r4, r3
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <calculateSnake+0x394>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4403      	add	r3, r0
 80010de:	440b      	add	r3, r1
 80010e0:	4622      	mov	r2, r4
 80010e2:	701a      	strb	r2, [r3, #0]
	gameboard[snake2.row][snake2.col] = snake2Length + 1;
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <calculateSnake+0x390>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4a34      	ldr	r2, [pc, #208]	; (80011bc <calculateSnake+0x38c>)
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4933      	ldr	r1, [pc, #204]	; (80011bc <calculateSnake+0x38c>)
 80010f0:	6849      	ldr	r1, [r1, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2dc      	uxtb	r4, r3
 80010f6:	4833      	ldr	r0, [pc, #204]	; (80011c4 <calculateSnake+0x394>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4403      	add	r3, r0
 8001102:	440b      	add	r3, r1
 8001104:	4622      	mov	r2, r4
 8001106:	701a      	strb	r2, [r3, #0]

	// decrement all the snake body segments, if segment is 0, turn the corresponding led off
	for (int row = 0; row < ROW_NUM; row++)
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e042      	b.n	8001194 <calculateSnake+0x364>
	{
		for (int col = 0; col < COL_NUM; col++)
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	e039      	b.n	8001188 <calculateSnake+0x358>
		{
			// if there is a body segment, decrement it's value
			if (gameboard[row][col] > 0)
 8001114:	492b      	ldr	r1, [pc, #172]	; (80011c4 <calculateSnake+0x394>)
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	18ca      	adds	r2, r1, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d016      	beq.n	800115a <calculateSnake+0x32a>
			{
				gameboard[row][col]--;
 800112c:	4925      	ldr	r1, [pc, #148]	; (80011c4 <calculateSnake+0x394>)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	18ca      	adds	r2, r1, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	b2d8      	uxtb	r0, r3
 8001144:	491f      	ldr	r1, [pc, #124]	; (80011c4 <calculateSnake+0x394>)
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	18ca      	adds	r2, r1, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	4602      	mov	r2, r0
 8001158:	701a      	strb	r2, [r3, #0]
			}

			// display the current pixel
			setLEDM(row, col, gameboard[row][col] == 0 ? 0 : 1, false);
 800115a:	491a      	ldr	r1, [pc, #104]	; (80011c4 <calculateSnake+0x394>)
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	18ca      	adds	r2, r1, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf14      	ite	ne
 8001172:	2301      	movne	r3, #1
 8001174:	2300      	moveq	r3, #0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	2300      	movs	r3, #0
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 fceb 	bl	8001b58 <setLEDM>
		for (int col = 0; col < COL_NUM; col++)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3301      	adds	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b17      	cmp	r3, #23
 800118c:	ddc2      	ble.n	8001114 <calculateSnake+0x2e4>
	for (int row = 0; row < ROW_NUM; row++)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b17      	cmp	r3, #23
 8001198:	ddb9      	ble.n	800110e <calculateSnake+0x2de>
		}
	}

	//Controller.buzz(toBuzz);
	sendAll();
 800119a:	f000 fd77 	bl	8001c8c <sendAll>
 800119e:	e002      	b.n	80011a6 <calculateSnake+0x376>
		return;
 80011a0:	bf00      	nop
 80011a2:	e000      	b.n	80011a6 <calculateSnake+0x376>
			return;
 80011a4:	bf00      	nop
}
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	200000a8 	.word	0x200000a8
 80011b0:	200000b8 	.word	0x200000b8
 80011b4:	200000c0 	.word	0x200000c0
 80011b8:	200000cc 	.word	0x200000cc
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	200000c4 	.word	0x200000c4
 80011c4:	200000d0 	.word	0x200000d0

080011c8 <handleGameStates>:

void handleGameStates() //snake
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	if (gameOver1 || win1 || gameOver2 || win2)
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <handleGameStates+0x110>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <handleGameStates+0x26>
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <handleGameStates+0x114>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <handleGameStates+0x26>
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <handleGameStates+0x118>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <handleGameStates+0x26>
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <handleGameStates+0x11c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d070      	beq.n	80012d0 <handleGameStates+0x108>
	{
		unrollSnake();
 80011ee:	f000 f88d 	bl	800130c <unrollSnake>
//Controller.gameOverBuzz();
		int score = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]

		if (gameOver1 || win2)
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <handleGameStates+0x110>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <handleGameStates+0x3e>
 80011fe:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <handleGameStates+0x11c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <handleGameStates+0x50>
		{
			win_msg(2);
 8001206:	2002      	movs	r0, #2
 8001208:	f7ff f9ac 	bl	8000564 <win_msg>
			score = snake2Length - initialSnakeLength;
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <handleGameStates+0x120>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2203      	movs	r2, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e00f      	b.n	8001238 <handleGameStates+0x70>
		}
		else if (gameOver2 || win1)
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <handleGameStates+0x118>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <handleGameStates+0x60>
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <handleGameStates+0x114>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <handleGameStates+0x70>
		{
			win_msg(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff f99b 	bl	8000564 <win_msg>
			score = snake1Length - initialSnakeLength;
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <handleGameStates+0x124>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2203      	movs	r2, #3
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	607b      	str	r3, [r7, #4]
		}

		print_score(score);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff f831 	bl	80002a0 <print_score>

		// re-init the game
		win1 = false;
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <handleGameStates+0x114>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
		gameOver1 = false;
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <handleGameStates+0x110>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		win2 = false;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <handleGameStates+0x11c>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
		gameOver2 = false;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <handleGameStates+0x118>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

		snake1.row = 20; // початкове полож 1 гравця
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <handleGameStates+0x128>)
 8001258:	2214      	movs	r2, #20
 800125a:	601a      	str	r2, [r3, #0]
		snake1.col = 11;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <handleGameStates+0x128>)
 800125e:	220b      	movs	r2, #11
 8001260:	605a      	str	r2, [r3, #4]

		if (!one_player)
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <handleGameStates+0x12c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <handleGameStates+0xb6>
		{
			snake2.row = 3; // початкове полож 2 гравця
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <handleGameStates+0x130>)
 8001272:	2203      	movs	r2, #3
 8001274:	601a      	str	r2, [r3, #0]
			snake2.col = 11;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <handleGameStates+0x130>)
 8001278:	220b      	movs	r2, #11
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e00a      	b.n	8001294 <handleGameStates+0xcc>
		}
		else
		{
			snake2.row = -1;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <handleGameStates+0x130>)
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	601a      	str	r2, [r3, #0]
			snake2.col = -1;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <handleGameStates+0x130>)
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	605a      	str	r2, [r3, #4]
			snake2Direction = -1;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <handleGameStates+0x134>)
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	701a      	strb	r2, [r3, #0]
		}

		food.row = -1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <handleGameStates+0x138>)
 8001296:	f04f 32ff 	mov.w	r2, #4294967295
 800129a:	601a      	str	r2, [r3, #0]
		food.col = -1;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <handleGameStates+0x138>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	605a      	str	r2, [r3, #4]
		snake1Length = initialSnakeLength;
 80012a4:	2303      	movs	r3, #3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <handleGameStates+0x124>)
 80012aa:	601a      	str	r2, [r3, #0]
		snake1Direction = 0;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <handleGameStates+0x13c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]

		snake2Length = initialSnakeLength;
 80012b2:	2303      	movs	r3, #3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <handleGameStates+0x120>)
 80012b8:	601a      	str	r2, [r3, #0]
		snake2Direction = 0;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <handleGameStates+0x134>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

		memset(gameboard, 0, sizeof(gameboard[0][0]) * COL_NUM * ROW_NUM);
 80012c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80012c4:	2100      	movs	r1, #0
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <handleGameStates+0x140>)
 80012c8:	f002 fe9a 	bl	8004000 <memset>

		clearAllDisplay();
 80012cc:	f000 fbd2 	bl	8001a74 <clearAllDisplay>
	}
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000009d 	.word	0x2000009d
 80012dc:	2000009c 	.word	0x2000009c
 80012e0:	2000009f 	.word	0x2000009f
 80012e4:	2000009e 	.word	0x2000009e
 80012e8:	200000c4 	.word	0x200000c4
 80012ec:	200000c0 	.word	0x200000c0
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	200000a0 	.word	0x200000a0
 80012f8:	200000b0 	.word	0x200000b0
 80012fc:	200000c9 	.word	0x200000c9
 8001300:	200000b8 	.word	0x200000b8
 8001304:	200000c8 	.word	0x200000c8
 8001308:	200000d0 	.word	0x200000d0

0800130c <unrollSnake>:

void unrollSnake()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
	// switch off the food LED
	setLEDM(food.row, food.col, 0, true);
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <unrollSnake+0x174>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <unrollSnake+0x174>)
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	f000 fc1b 	bl	8001b58 <setLEDM>

	delay(800);
 8001322:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001326:	f000 feeb 	bl	8002100 <HAL_Delay>

	//int note[] = {700, 600, 500, 400, 300, 200};

	// flash the screen 5 times
	for (int i = 0; i < 5; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e066      	b.n	80013fe <unrollSnake+0xf2>
	{
		// invert the screen
		for (int row = 0; row < ROW_NUM; row++)
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e01f      	b.n	8001376 <unrollSnake+0x6a>
		{
			for (int col = 0; col < COL_NUM; col++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e016      	b.n	800136a <unrollSnake+0x5e>
			{
				setLEDM(row, col, gameboard[row][col] == 0 ? 1 : 0, false);
 800133c:	4951      	ldr	r1, [pc, #324]	; (8001484 <unrollSnake+0x178>)
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	18ca      	adds	r2, r1, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	2300      	movs	r3, #0
 800135c:	6979      	ldr	r1, [r7, #20]
 800135e:	69b8      	ldr	r0, [r7, #24]
 8001360:	f000 fbfa 	bl	8001b58 <setLEDM>
			for (int col = 0; col < COL_NUM; col++)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2b17      	cmp	r3, #23
 800136e:	dde5      	ble.n	800133c <unrollSnake+0x30>
		for (int row = 0; row < ROW_NUM; row++)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	3301      	adds	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b17      	cmp	r3, #23
 800137a:	dddc      	ble.n	8001336 <unrollSnake+0x2a>
			}
		}

		sendAll();
 800137c:	f000 fc86 	bl	8001c8c <sendAll>

		//delay(10);
		//tone(8, note[i], 150);

		// invert it back
		for (int row = 0; row < ROW_NUM; row++)
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e01f      	b.n	80013c6 <unrollSnake+0xba>
		{
			for (int col = 0; col < COL_NUM; col++)
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e016      	b.n	80013ba <unrollSnake+0xae>
			{
				setLEDM(row, col, gameboard[row][col] == 0 ? 0 : 1, false);
 800138c:	493d      	ldr	r1, [pc, #244]	; (8001484 <unrollSnake+0x178>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	18ca      	adds	r2, r1, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	6938      	ldr	r0, [r7, #16]
 80013b0:	f000 fbd2 	bl	8001b58 <setLEDM>
			for (int col = 0; col < COL_NUM; col++)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b17      	cmp	r3, #23
 80013be:	dde5      	ble.n	800138c <unrollSnake+0x80>
		for (int row = 0; row < ROW_NUM; row++)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b17      	cmp	r3, #23
 80013ca:	dddc      	ble.n	8001386 <unrollSnake+0x7a>
			}

			//Controller.matrix.send();
		}

		sendAll();
 80013cc:	f000 fc5e 	bl	8001c8c <sendAll>


		delay(10);
 80013d0:	200a      	movs	r0, #10
 80013d2:	f000 fe95 	bl	8002100 <HAL_Delay>

		if (scanJoystick(1) != -1 || scanJoystick(2) != -1)
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff f940 	bl	800065c <scanJoystick>
 80013dc:	4603      	mov	r3, r0
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e2:	d106      	bne.n	80013f2 <unrollSnake+0xe6>
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f939 	bl	800065c <scanJoystick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d002      	beq.n	80013f8 <unrollSnake+0xec>
		{
			clearAllDisplay();
 80013f2:	f000 fb3f 	bl	8001a74 <clearAllDisplay>

			return;
 80013f6:	e03f      	b.n	8001478 <unrollSnake+0x16c>
	for (int i = 0; i < 5; i++)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	2b04      	cmp	r3, #4
 8001402:	dd95      	ble.n	8001330 <unrollSnake+0x24>
		}
	}

	delay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f000 fe7b 	bl	8002100 <HAL_Delay>

	for (int i = 1; i <= snake1Length + snake2Length; i++)
 800140a:	2301      	movs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	e02b      	b.n	8001468 <unrollSnake+0x15c>
	{
		for (int row = 0; row < ROW_NUM; row++)
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e022      	b.n	800145c <unrollSnake+0x150>
		{
			for (int col = 0; col < COL_NUM; col++)
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	e019      	b.n	8001450 <unrollSnake+0x144>
			{
				if (gameboard[row][col] == i)
 800141c:	4919      	ldr	r1, [pc, #100]	; (8001484 <unrollSnake+0x178>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	18ca      	adds	r2, r1, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4293      	cmp	r3, r2
 8001436:	d108      	bne.n	800144a <unrollSnake+0x13e>
				{
					setLEDM(row, col, 0, true);
 8001438:	2301      	movs	r3, #1
 800143a:	2200      	movs	r2, #0
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fb8a 	bl	8001b58 <setLEDM>
					delay(100);
 8001444:	2064      	movs	r0, #100	; 0x64
 8001446:	f000 fe5b 	bl	8002100 <HAL_Delay>
			for (int col = 0; col < COL_NUM; col++)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b17      	cmp	r3, #23
 8001454:	dde2      	ble.n	800141c <unrollSnake+0x110>
		for (int row = 0; row < ROW_NUM; row++)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b17      	cmp	r3, #23
 8001460:	ddd9      	ble.n	8001416 <unrollSnake+0x10a>
	for (int i = 1; i <= snake1Length + snake2Length; i++)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <unrollSnake+0x17c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <unrollSnake+0x180>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4413      	add	r3, r2
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	ddcb      	ble.n	8001410 <unrollSnake+0x104>
				}
			}
		}
	}
}
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000b8 	.word	0x200000b8
 8001484:	200000d0 	.word	0x200000d0
 8001488:	200000c0 	.word	0x200000c0
 800148c:	200000c4 	.word	0x200000c4

08001490 <SnakeSetup>:

void SnakeSetup()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	calibrate();
 8001494:	f7fe fe5a 	bl	800014c <calibrate>
	initialize();
 8001498:	f7ff fc48 	bl	8000d2c <initialize>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_ADC1_Init+0x74>)
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <MX_ADC1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_ADC1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_ADC1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_ADC1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_ADC1_Init+0x74>)
 80014ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_ADC1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_ADC1_Init+0x74>)
 80014d8:	2201      	movs	r2, #1
 80014da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_ADC1_Init+0x74>)
 80014de:	f000 fe31 	bl	8002144 <HAL_ADC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 f99e 	bl	8001828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_ADC1_Init+0x74>)
 80014fe:	f001 f9af 	bl	8002860 <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001508:	f000 f98e 	bl	8001828 <Error_Handler>
  }

}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000360 	.word	0x20000360
 8001518:	40012400 	.word	0x40012400

0800151c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_ADC2_Init+0x74>)
 800152e:	4a19      	ldr	r2, [pc, #100]	; (8001594 <MX_ADC2_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC2_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_ADC2_Init+0x74>)
 8001546:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800154a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_ADC2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_ADC2_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC2_Init+0x74>)
 800155a:	f000 fdf3 	bl	8002144 <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f960 	bl	8001828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156c:	2301      	movs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC2_Init+0x74>)
 800157a:	f001 f971 	bl	8002860 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001584:	f000 f950 	bl	8001828 <Error_Handler>
  }

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000330 	.word	0x20000330
 8001594:	40012800 	.word	0x40012800

08001598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_ADC_MspInit+0xdc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d12a      	bne.n	800160e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = X1P_Pin;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ec:	2303      	movs	r3, #3
 80015ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(X1P_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4821      	ldr	r0, [pc, #132]	; (800167c <HAL_ADC_MspInit+0xe4>)
 80015f8:	f001 fbce 	bl	8002d98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2012      	movs	r0, #18
 8001602:	f001 fb92 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001606:	2012      	movs	r0, #18
 8001608:	f001 fbab 	bl	8002d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800160c:	e02e      	b.n	800166c <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_ADC_MspInit+0xe8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d129      	bne.n	800166c <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_ADC_MspInit+0xe0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Y1P_Pin;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Y1P_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4619      	mov	r1, r3
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_ADC_MspInit+0xe4>)
 8001658:	f001 fb9e 	bl	8002d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2012      	movs	r0, #18
 8001662:	f001 fb62 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001666:	2012      	movs	r0, #18
 8001668:	f001 fb7b 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40012400 	.word	0x40012400
 8001678:	40021000 	.word	0x40021000
 800167c:	40010800 	.word	0x40010800
 8001680:	40012800 	.word	0x40012800

08001684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_GPIO_Init+0xa4>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <MX_GPIO_Init+0xa4>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a16      	ldr	r2, [pc, #88]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_GPIO_Init+0xa4>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	4811      	ldr	r0, [pc, #68]	; (800172c <MX_GPIO_Init+0xa8>)
 80016e6:	f001 fcb1 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 80016ea:	2340      	movs	r3, #64	; 0x40
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <MX_GPIO_Init+0xa8>)
 8001702:	f001 fb49 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = button1P_Pin|button2P_Pin;
 8001706:	2306      	movs	r3, #6
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_GPIO_Init+0xac>)
 800171a:	f001 fb3d 	bl	8002d98 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001738:	f000 fc80 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173c:	f000 f819 	bl	8001772 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f7ff ffa0 	bl	8001684 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001744:	f7ff feac 	bl	80014a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001748:	f7ff fee8 	bl	800151c <MX_ADC2_Init>
  MX_SPI1_Init();
 800174c:	f000 fb12 	bl	8001d74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  matrixSetup(5, 6);
 8001750:	2106      	movs	r1, #6
 8001752:	2005      	movs	r0, #5
 8001754:	f000 f86e 	bl	8001834 <matrixSetup>

  setLEDM(12, 13, true, true);
 8001758:	2301      	movs	r3, #1
 800175a:	2201      	movs	r2, #1
 800175c:	210d      	movs	r1, #13
 800175e:	200c      	movs	r0, #12
 8001760:	f000 f9fa 	bl	8001b58 <setLEDM>

  clearAllDisplay();
 8001764:	f000 f986 	bl	8001a74 <clearAllDisplay>
  SnakeSetup();
 8001768:	f7ff fe92 	bl	8001490 <SnakeSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SnakeLoop();
 800176c:	f7ff f81a 	bl	80007a4 <SnakeLoop>
 8001770:	e7fc      	b.n	800176c <main+0x38>

08001772 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b094      	sub	sp, #80	; 0x50
 8001776:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177c:	2228      	movs	r2, #40	; 0x28
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc3d 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fc57 	bl	800307c <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017d4:	f000 f828 	bl	8001828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fec1 	bl	800357c <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001800:	f000 f812 	bl	8001828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001804:	2302      	movs	r3, #2
 8001806:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f002 f83b 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800181c:	f000 f804 	bl	8001828 <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	; 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <matrixSetup>:
uint8_t spidata[16] = { 0 };
uint8_t status[64];
int8_t maxDevices;

void matrixSetup(int8_t numDevices, int8_t intensity)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	71bb      	strb	r3, [r7, #6]
	if (numDevices <= 0 || numDevices > 8)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	dd03      	ble.n	8001854 <matrixSetup+0x20>
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b08      	cmp	r3, #8
 8001852:	dd01      	ble.n	8001858 <matrixSetup+0x24>
		numDevices = 8;
 8001854:	2308      	movs	r3, #8
 8001856:	71fb      	strb	r3, [r7, #7]

	maxDevices = numDevices;
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <matrixSetup+0xc0>)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	7013      	strb	r3, [r2, #0]

	cs_set();
 800185e:	2200      	movs	r2, #0
 8001860:	2140      	movs	r1, #64	; 0x40
 8001862:	4825      	ldr	r0, [pc, #148]	; (80018f8 <matrixSetup+0xc4>)
 8001864:	f001 fbf2 	bl	800304c <HAL_GPIO_WritePin>

	for (int i = 0; i < 64; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e007      	b.n	800187e <matrixSetup+0x4a>
	{
		status[i] = 0x00;
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <matrixSetup+0xc8>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b3f      	cmp	r3, #63	; 0x3f
 8001882:	ddf4      	ble.n	800186e <matrixSetup+0x3a>
	}

	for (int i = 0; i < maxDevices; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	e029      	b.n	80018de <matrixSetup+0xaa>
	{
		spiTransfer(i, OP_DISPLAYTEST, 0); // вимкнути режим тестування
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	2200      	movs	r2, #0
 8001890:	210f      	movs	r1, #15
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fa14 	bl	8001cc0 <spiTransfer>
		setScanLimit(i, 7); // ввімкнути всі 8 рядків на матриці
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	2107      	movs	r1, #7
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f85a 	bl	8001958 <setScanLimit>
		spiTransfer(i, OP_DECODE, 0); // робота без декодування(в драйвері)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	2200      	movs	r2, #0
 80018aa:	2109      	movs	r1, #9
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fa07 	bl	8001cc0 <spiTransfer>
		setIntensity(i, intensity); // яскравість
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f875 	bl	80019ac <setIntensity>
		clearDisplay(i);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f89a 	bl	8001a00 <clearDisplay>
		shutdown(i, false); // ввімкнути енергозбереження
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f814 	bl	8001900 <shutdown>
	for (int i = 0; i < maxDevices; i++)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	3301      	adds	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <matrixSetup+0xc0>)
 80018e0:	f993 3000 	ldrsb.w	r3, [r3]
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dbce      	blt.n	800188a <matrixSetup+0x56>
	}
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000390 	.word	0x20000390
 80018f8:	40010800 	.word	0x40010800
 80018fc:	20000394 	.word	0x20000394

08001900 <shutdown>:

void shutdown(int8_t addr, bool b)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	460a      	mov	r2, r1
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	4613      	mov	r3, r2
 800190e:	71bb      	strb	r3, [r7, #6]
	if (addr < 0 || addr >= maxDevices)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db19      	blt.n	800194c <shutdown+0x4c>
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <shutdown+0x54>)
 800191a:	f993 3000 	ldrsb.w	r3, [r3]
 800191e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001922:	429a      	cmp	r2, r3
 8001924:	da12      	bge.n	800194c <shutdown+0x4c>
		return;

	if (b)
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <shutdown+0x3c>
		spiTransfer(addr, OP_SHUTDOWN, 0);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2200      	movs	r2, #0
 8001932:	210c      	movs	r1, #12
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9c3 	bl	8001cc0 <spiTransfer>
 800193a:	e008      	b.n	800194e <shutdown+0x4e>
	else
		spiTransfer(addr, OP_SHUTDOWN, 1);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2201      	movs	r2, #1
 8001942:	210c      	movs	r1, #12
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f9bb 	bl	8001cc0 <spiTransfer>
 800194a:	e000      	b.n	800194e <shutdown+0x4e>
		return;
 800194c:	bf00      	nop
}
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000390 	.word	0x20000390

08001958 <setScanLimit>:

void setScanLimit(int8_t addr, int8_t limit)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
	if (addr < 0 || addr >= maxDevices)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db16      	blt.n	800199e <setScanLimit+0x46>
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <setScanLimit+0x50>)
 8001972:	f993 3000 	ldrsb.w	r3, [r3]
 8001976:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	da0f      	bge.n	800199e <setScanLimit+0x46>
		return;

	if (limit >= 0 && limit < 8)
 800197e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0c      	blt.n	80019a0 <setScanLimit+0x48>
 8001986:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800198a:	2b07      	cmp	r3, #7
 800198c:	dc08      	bgt.n	80019a0 <setScanLimit+0x48>
		spiTransfer(addr, OP_SCANLIMIT, limit);
 800198e:	79ba      	ldrb	r2, [r7, #6]
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	210b      	movs	r1, #11
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f992 	bl	8001cc0 <spiTransfer>
 800199c:	e000      	b.n	80019a0 <setScanLimit+0x48>
		return;
 800199e:	bf00      	nop
}
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000390 	.word	0x20000390

080019ac <setIntensity>:

void setIntensity(int8_t addr, int8_t intensity)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71bb      	strb	r3, [r7, #6]
	if (addr < 0 || addr >= maxDevices)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db16      	blt.n	80019f2 <setIntensity+0x46>
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <setIntensity+0x50>)
 80019c6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	da0f      	bge.n	80019f2 <setIntensity+0x46>
		return;

	if (intensity >= 0 && intensity < 16)
 80019d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0c      	blt.n	80019f4 <setIntensity+0x48>
 80019da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	dc08      	bgt.n	80019f4 <setIntensity+0x48>
		spiTransfer(addr, OP_INTENSITY, intensity);
 80019e2:	79ba      	ldrb	r2, [r7, #6]
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	210a      	movs	r1, #10
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f968 	bl	8001cc0 <spiTransfer>
 80019f0:	e000      	b.n	80019f4 <setIntensity+0x48>
		return;
 80019f2:	bf00      	nop
}
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000390 	.word	0x20000390

08001a00 <clearDisplay>:

void clearDisplay(int8_t addr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if (addr < 0 || addr >= maxDevices)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db28      	blt.n	8001a64 <clearDisplay+0x64>
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <clearDisplay+0x6c>)
 8001a14:	f993 3000 	ldrsb.w	r3, [r3]
 8001a18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	da21      	bge.n	8001a64 <clearDisplay+0x64>
		return;

	const int offset = addr * 8;
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 8; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e016      	b.n	8001a5c <clearDisplay+0x5c>
	{
		status[offset + i] = 0;
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <clearDisplay+0x70>)
 8001a36:	2100      	movs	r1, #0
 8001a38:	54d1      	strb	r1, [r2, r3]
		spiTransfer(addr, i + 1, status[offset + i]);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2d9      	uxtb	r1, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <clearDisplay+0x70>)
 8001a4a:	5cd2      	ldrb	r2, [r2, r3]
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f935 	bl	8001cc0 <spiTransfer>
	for (int i = 0; i < 8; i++)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	dde5      	ble.n	8001a2e <clearDisplay+0x2e>
 8001a62:	e000      	b.n	8001a66 <clearDisplay+0x66>
		return;
 8001a64:	bf00      	nop
	}
}
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	20000394 	.word	0x20000394

08001a74 <clearAllDisplay>:

void clearAllDisplay()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 5; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e00a      	b.n	8001a96 <clearAllDisplay+0x22>
		clearDisplay(i);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffbb 	bl	8001a00 <clearDisplay>
	for (int8_t i = 0; i < 5; i++)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	ddf0      	ble.n	8001a80 <clearAllDisplay+0xc>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <setLed>:

void setLed(int8_t addr, int row, int column, bool state)	// матриця, рядок, стовпець, стан
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	73bb      	strb	r3, [r7, #14]
	if (addr < 0 || addr >= maxDevices)
 8001abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db3d      	blt.n	8001b40 <setLed+0x98>
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <setLed+0xa8>)
 8001ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	da36      	bge.n	8001b40 <setLed+0x98>
		return;
	if (row < 0 || row > 7 || column < 0 || column > 7)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db35      	blt.n	8001b44 <setLed+0x9c>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	dc32      	bgt.n	8001b44 <setLed+0x9c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db2f      	blt.n	8001b44 <setLed+0x9c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b07      	cmp	r3, #7
 8001ae8:	dc2c      	bgt.n	8001b44 <setLed+0x9c>
		return;

	const int offset = addr * 8;
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]
	uint8_t val = 128 >> column;
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	fa42 f303 	asr.w	r3, r2, r3
 8001afa:	74fb      	strb	r3, [r7, #19]

	if (state)
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <setLed+0x76>
	{
		status[offset + row] = status[offset + row] | val;
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <setLed+0xac>)
 8001b0a:	5cd1      	ldrb	r1, [r2, r3]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	7cfa      	ldrb	r2, [r7, #19]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	b2d1      	uxtb	r1, r2
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <setLed+0xac>)
 8001b1a:	54d1      	strb	r1, [r2, r3]
 8001b1c:	e013      	b.n	8001b46 <setLed+0x9e>
	}
	else
	{
		val = ~val;
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	74fb      	strb	r3, [r7, #19]
		status[offset + row] = status[offset + row] & val;
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <setLed+0xac>)
 8001b2c:	5cd1      	ldrb	r1, [r2, r3]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	7cfa      	ldrb	r2, [r7, #19]
 8001b36:	400a      	ands	r2, r1
 8001b38:	b2d1      	uxtb	r1, r2
 8001b3a:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <setLed+0xac>)
 8001b3c:	54d1      	strb	r1, [r2, r3]
 8001b3e:	e002      	b.n	8001b46 <setLed+0x9e>
		return;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <setLed+0x9e>
		return;
 8001b44:	bf00      	nop
	}
}
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000390 	.word	0x20000390
 8001b54:	20000394 	.word	0x20000394

08001b58 <setLEDM>:

void setLEDM(int row, int col, bool v, bool upd) // встановлення стану діода(пікселя) на рядку row(нумерація зверху) і стовпці row(нум. зліва) на v(1-включений, 0 - викл)
		{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	460b      	mov	r3, r1
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	71bb      	strb	r3, [r7, #6]
	char to_update = -1;
 8001b6e:	23ff      	movs	r3, #255	; 0xff
 8001b70:	75fb      	strb	r3, [r7, #23]
	if (row > 7 && row < 16) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	dd3a      	ble.n	8001bee <setLEDM+0x96>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	dc37      	bgt.n	8001bee <setLEDM+0x96>
		// центральний ряд матриць
		if (col < 8 && col >= 0) {
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	dc0d      	bgt.n	8001ba0 <setLEDM+0x48>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0a      	blt.n	8001ba0 <setLEDM+0x48>
			setLed(3, row - 8, col, v);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1a3 0108 	sub.w	r1, r3, #8
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	2003      	movs	r0, #3
 8001b96:	f7ff ff87 	bl	8001aa8 <setLed>
			to_update = 3;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	75fb      	strb	r3, [r7, #23]
 8001b9e:	e025      	b.n	8001bec <setLEDM+0x94>
		} else if (col >= 8 && col < 16) {
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	dd0f      	ble.n	8001bc6 <setLEDM+0x6e>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	dc0c      	bgt.n	8001bc6 <setLEDM+0x6e>
			setLed(2, row - 8, col - 8, v);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f1a3 0108 	sub.w	r1, r3, #8
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7ff ff74 	bl	8001aa8 <setLed>
			to_update = 2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	e012      	b.n	8001bec <setLEDM+0x94>
		} else if (col >= 16 && col < 24) {
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	dd2b      	ble.n	8001c24 <setLEDM+0xcc>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b17      	cmp	r3, #23
 8001bd0:	dc28      	bgt.n	8001c24 <setLEDM+0xcc>
			setLed(1, row - 8, col - 16, v);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1a3 0108 	sub.w	r1, r3, #8
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f1a3 0210 	sub.w	r2, r3, #16
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff ff61 	bl	8001aa8 <setLed>
			to_update = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
		if (col < 8 && col >= 0) {
 8001bea:	e01b      	b.n	8001c24 <setLEDM+0xcc>
 8001bec:	e01a      	b.n	8001c24 <setLEDM+0xcc>
		}
	} else if (row > 15) {
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	dd0c      	ble.n	8001c0e <setLEDM+0xb6>
		// нижня матриця
		setLed(0, row - 16, col - 8, v);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f1a3 0110 	sub.w	r1, r3, #16
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f1a3 0208 	sub.w	r2, r3, #8
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff ff50 	bl	8001aa8 <setLed>
		to_update = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]
 8001c0c:	e00b      	b.n	8001c26 <setLEDM+0xce>
	} else {
		// верхня матриця
		setLed(4, row, col - 8, v);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f1a3 0208 	sub.w	r2, r3, #8
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f7ff ff45 	bl	8001aa8 <setLed>
		to_update = 4;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	75fb      	strb	r3, [r7, #23]
 8001c22:	e000      	b.n	8001c26 <setLEDM+0xce>
		if (col < 8 && col >= 0) {
 8001c24:	bf00      	nop
	}

	if (upd) {
 8001c26:	79bb      	ldrb	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <setLEDM+0xde>
		send(to_update);
 8001c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f805 	bl	8001c40 <send>
	}
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <send>:

void send(int8_t matrix)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	const int offset = matrix * 8;
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 8; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e010      	b.n	8001c7a <send+0x3a>
		spiTransfer(matrix, i + 1, status[offset + i]);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2d9      	uxtb	r1, r3
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <send+0x48>)
 8001c68:	5cd2      	ldrb	r2, [r2, r3]
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f826 	bl	8001cc0 <spiTransfer>
	for (int i = 0; i < 8; i++)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	ddeb      	ble.n	8001c58 <send+0x18>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000394 	.word	0x20000394

08001c8c <sendAll>:

void sendAll()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < MATRIX_NUM; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	e00a      	b.n	8001cae <sendAll+0x22>
		send(i);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ffcf 	bl	8001c40 <send>
	for (int8_t i = 0; i < MATRIX_NUM; i++)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	ddf0      	ble.n	8001c98 <sendAll+0xc>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <spiTransfer>:

void spiTransfer(int8_t addr, uint8_t opcode, uint8_t data)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	71bb      	strb	r3, [r7, #6]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	717b      	strb	r3, [r7, #5]
	const int offset = addr * 2; // зміщення 16 біт * індекс матриці
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
	const int maxbytes = maxDevices * 2; // довжина пакету 16 біт (2 байт) * к-ксть матриць
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <spiTransfer+0xa4>)
 8001cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < maxbytes; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	e007      	b.n	8001cfa <spiTransfer+0x3a>
		spidata[i] = (uint8_t)0; // занулення майб пакету
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <spiTransfer+0xa8>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < maxbytes; i++)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbf3      	blt.n	8001cea <spiTransfer+0x2a>

	spidata[offset + 1] = opcode; // адреса (D16(11)-D8) зміщена на offset
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	4918      	ldr	r1, [pc, #96]	; (8001d68 <spiTransfer+0xa8>)
 8001d08:	79ba      	ldrb	r2, [r7, #6]
 8001d0a:	54ca      	strb	r2, [r1, r3]
	spidata[offset] = data; // дані
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <spiTransfer+0xa8>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	797a      	ldrb	r2, [r7, #5]
 8001d14:	701a      	strb	r2, [r3, #0]

	uint8_t Buf[1] = {0};
 8001d16:	2300      	movs	r3, #0
 8001d18:	733b      	strb	r3, [r7, #12]

	cs_set(); // дозвіл прийому
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	4813      	ldr	r0, [pc, #76]	; (8001d6c <spiTransfer+0xac>)
 8001d20:	f001 f994 	bl	800304c <HAL_GPIO_WritePin>

	for (int i = maxbytes; i > 0; i--)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	e00f      	b.n	8001d4a <spiTransfer+0x8a>
	{
		Buf[0] = spidata[i - 1];
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <spiTransfer+0xa8>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit (&hspi1, (uint8_t*)Buf, 1, 5000);
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	480c      	ldr	r0, [pc, #48]	; (8001d70 <spiTransfer+0xb0>)
 8001d40:	f001 ff77 	bl	8003c32 <HAL_SPI_Transmit>
	for (int i = maxbytes; i > 0; i--)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dcec      	bgt.n	8001d2a <spiTransfer+0x6a>
	}

	cs_reset();
 8001d50:	2201      	movs	r2, #1
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <spiTransfer+0xac>)
 8001d56:	f001 f979 	bl	800304c <HAL_GPIO_WritePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000390 	.word	0x20000390
 8001d68:	20000310 	.word	0x20000310
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	200003d4 	.word	0x200003d4

08001d74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <MX_SPI1_Init+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da8:	2208      	movs	r2, #8
 8001daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc6:	f001 fed3 	bl	8003b70 <HAL_SPI_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dd0:	f7ff fd2a 	bl	8001828 <Error_Handler>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200003d4 	.word	0x200003d4
 8001ddc:	40013000 	.word	0x40013000

08001de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <HAL_SPI_MspInit+0x70>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d123      	bne.n	8001e48 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_SPI_MspInit+0x74>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e30:	23a0      	movs	r3, #160	; 0xa0
 8001e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	4619      	mov	r1, r3
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_SPI_MspInit+0x78>)
 8001e44:	f000 ffa8 	bl	8002d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013000 	.word	0x40013000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6193      	str	r3, [r2, #24]
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_MspInit+0x5c>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_MspInit+0x60>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_MspInit+0x60>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010000 	.word	0x40010000

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <HardFault_Handler+0x4>

08001ed2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <BusFault_Handler+0x4>

08001ede <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <UsageFault_Handler+0x4>

08001ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0c:	f000 f8dc 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <ADC1_2_IRQHandler+0x14>)
 8001f1a:	f000 fbcb 	bl	80026b4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <ADC1_2_IRQHandler+0x18>)
 8001f20:	f000 fbc8 	bl	80026b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000360 	.word	0x20000360
 8001f2c:	20000330 	.word	0x20000330

08001f30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x50>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x16>
		heap_end = &end;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <_sbrk+0x50>)
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <_sbrk+0x54>)
 8001f44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <_sbrk+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <_sbrk+0x50>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	466a      	mov	r2, sp
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d907      	bls.n	8001f6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f5a:	f002 f827 	bl	8003fac <__errno>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	230c      	movs	r3, #12
 8001f62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e006      	b.n	8001f78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <_sbrk+0x50>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <_sbrk+0x50>)
 8001f74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000320 	.word	0x20000320
 8001f84:	20000438 	.word	0x20000438

08001f88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <SystemInit+0x5c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <SystemInit+0x5c>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <SystemInit+0x5c>)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <SystemInit+0x5c>)
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <SystemInit+0x60>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <SystemInit+0x5c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <SystemInit+0x5c>)
 8001faa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <SystemInit+0x5c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SystemInit+0x5c>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <SystemInit+0x5c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <SystemInit+0x5c>)
 8001fc6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SystemInit+0x5c>)
 8001fce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fd2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SystemInit+0x64>)
 8001fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fda:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	f8ff0000 	.word	0xf8ff0000
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ff0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ff2:	e003      	b.n	8001ffc <LoopCopyDataInit>

08001ff4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ff6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ff8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ffa:	3104      	adds	r1, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ffc:	480a      	ldr	r0, [pc, #40]	; (8002028 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002000:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002002:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002004:	d3f6      	bcc.n	8001ff4 <CopyDataInit>
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002008:	e002      	b.n	8002010 <LoopFillZerobss>

0800200a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800200c:	f842 3b04 	str.w	r3, [r2], #4

08002010 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002012:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002014:	d3f9      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002016:	f7ff ffb7 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f001 ffcd 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201e:	f7ff fb89 	bl	8001734 <main>
  bx lr
 8002022:	4770      	bx	lr
  ldr r3, =_sidata
 8002024:	080048e8 	.word	0x080048e8
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800202c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002030:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002034:	20000434 	.word	0x20000434

08002038 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <CAN1_RX1_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x28>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 fe61 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff ff00 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fe79 	bl	8002d7e <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 fe41 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x1c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x20>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_IncTick+0x20>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000008 	.word	0x20000008
 80020e8:	2000042c 	.word	0x2000042c

080020ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GetTick+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	2000042c 	.word	0x2000042c

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fff0 	bl	80020ec <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_Delay+0x40>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffe0 	bl	80020ec <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0be      	b.n	80022e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fa08 	bl	8001598 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fcb3 	bl	8002af4 <ADC_ConversionStop_Disable>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 8099 	bne.w	80022d2 <HAL_ADC_Init+0x18e>
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8095 	bne.w	80022d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021dc:	d003      	beq.n	80021e6 <HAL_ADC_Init+0xa2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_ADC_Init+0xa8>
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	e000      	b.n	80021ee <HAL_ADC_Init+0xaa>
 80021ec:	2300      	movs	r3, #0
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7d1b      	ldrb	r3, [r3, #20]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d119      	bne.n	8002230 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	3b01      	subs	r3, #1
 800220a:	035a      	lsls	r2, r3, #13
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_ADC_Init+0x1a8>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	430b      	orrs	r3, r1
 8002256:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d003      	beq.n	800226a <HAL_ADC_Init+0x126>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d104      	bne.n	8002274 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	3b01      	subs	r3, #1
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	430a      	orrs	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_ADC_Init+0x1ac>)
 8002290:	4013      	ands	r3, r2
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ae:	e018      	b.n	80022e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f023 0312 	bic.w	r3, r3, #18
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d0:	e007      	b.n	80022e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffe1f7fd 	.word	0xffe1f7fd
 80022f0:	ff1f0efe 	.word	0xff1f0efe

080022f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADC_Start+0x1a>
 800230a:	2302      	movs	r3, #2
 800230c:	e098      	b.n	8002440 <HAL_ADC_Start+0x14c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fb9a 	bl	8002a50 <ADC_Enable>
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8087 	bne.w	8002436 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a41      	ldr	r2, [pc, #260]	; (8002448 <HAL_ADC_Start+0x154>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d105      	bne.n	8002352 <HAL_ADC_Start+0x5e>
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_ADC_Start+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d026      	beq.n	80023ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237c:	e01d      	b.n	80023ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_ADC_Start+0x158>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_ADC_Start+0xaa>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_ADC_Start+0x154>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10d      	bne.n	80023ba <HAL_ADC_Start+0xc6>
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_ADC_Start+0x158>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f023 0206 	bic.w	r2, r3, #6
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d2:	e002      	b.n	80023da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0202 	mvn.w	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023fa:	d113      	bne.n	8002424 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_ADC_Start+0x154>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d105      	bne.n	8002412 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_ADC_Start+0x158>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	e00c      	b.n	800243e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	e003      	b.n	800243e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40012800 	.word	0x40012800
 800244c:	40012400 	.word	0x40012400

08002450 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Stop+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e01a      	b.n	80024a0 <HAL_ADC_Stop+0x50>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fb3e 	bl	8002af4 <ADC_ConversionStop_Disable>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024be:	f7ff fe15 	bl	80020ec <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0c8      	b.n	800267c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12a      	bne.n	800254e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d123      	bne.n	800254e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002506:	e01a      	b.n	800253e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d016      	beq.n	800253e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_ADC_PollForConversion+0x7e>
 8002516:	f7ff fde9 	bl	80020ec <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20b      	bcs.n	800253e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e09e      	b.n	800267c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0dd      	beq.n	8002508 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800254c:	e06c      	b.n	8002628 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <HAL_ADC_PollForConversion+0x1dc>)
 8002550:	681c      	ldr	r4, [r3, #0]
 8002552:	2002      	movs	r0, #2
 8002554:	f001 fa50 	bl	80039f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002558:	4603      	mov	r3, r0
 800255a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6919      	ldr	r1, [r3, #16]
 8002564:	4b48      	ldr	r3, [pc, #288]	; (8002688 <HAL_ADC_PollForConversion+0x1e0>)
 8002566:	400b      	ands	r3, r1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d118      	bne.n	800259e <HAL_ADC_PollForConversion+0xf6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68d9      	ldr	r1, [r3, #12]
 8002572:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_ADC_PollForConversion+0x1e4>)
 8002574:	400b      	ands	r3, r1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d111      	bne.n	800259e <HAL_ADC_PollForConversion+0xf6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6919      	ldr	r1, [r3, #16]
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_ADC_PollForConversion+0x1e8>)
 8002582:	400b      	ands	r3, r1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <HAL_ADC_PollForConversion+0xf2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68d9      	ldr	r1, [r3, #12]
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_ADC_PollForConversion+0x1ec>)
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_PollForConversion+0xf2>
 8002596:	2314      	movs	r3, #20
 8002598:	e020      	b.n	80025dc <HAL_ADC_PollForConversion+0x134>
 800259a:	2329      	movs	r3, #41	; 0x29
 800259c:	e01e      	b.n	80025dc <HAL_ADC_PollForConversion+0x134>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_ADC_PollForConversion+0x1e8>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_ADC_PollForConversion+0x112>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68d9      	ldr	r1, [r3, #12]
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_ADC_PollForConversion+0x1ec>)
 80025b4:	400b      	ands	r3, r1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_ADC_PollForConversion+0x12e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <HAL_ADC_PollForConversion+0x1f0>)
 80025c2:	400b      	ands	r3, r1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <HAL_ADC_PollForConversion+0x132>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <HAL_ADC_PollForConversion+0x1f0>)
 80025d0:	400b      	ands	r3, r1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_PollForConversion+0x132>
 80025d6:	2354      	movs	r3, #84	; 0x54
 80025d8:	e000      	b.n	80025dc <HAL_ADC_PollForConversion+0x134>
 80025da:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025e2:	e01d      	b.n	8002620 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d016      	beq.n	800261a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_ADC_PollForConversion+0x15a>
 80025f2:	f7ff fd7b 	bl	80020ec <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d20b      	bcs.n	800261a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e030      	b.n	800267c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8dd      	bhi.n	80025e4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0212 	mvn.w	r2, #18
 8002630:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002648:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800264c:	d115      	bne.n	800267a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002652:	2b00      	cmp	r3, #0
 8002654:	d111      	bne.n	800267a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	20000000 	.word	0x20000000
 8002688:	24924924 	.word	0x24924924
 800268c:	00924924 	.word	0x00924924
 8002690:	12492492 	.word	0x12492492
 8002694:	00492492 	.word	0x00492492
 8002698:	00249249 	.word	0x00249249

0800269c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d140      	bne.n	800274c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d139      	bne.n	800274c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026fe:	d11d      	bne.n	800273c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002704:	2b00      	cmp	r3, #0
 8002706:	d119      	bne.n	800273c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0220 	bic.w	r2, r2, #32
 8002716:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f87c 	bl	800283a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0212 	mvn.w	r2, #18
 800274a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d14f      	bne.n	80027fa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d148      	bne.n	80027fa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800278a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800278e:	d012      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800279a:	2b00      	cmp	r3, #0
 800279c:	d125      	bne.n	80027ea <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027ac:	d11d      	bne.n	80027ea <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9bc 	bl	8002b68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 020c 	mvn.w	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d114      	bne.n	8002832 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10d      	bne.n	8002832 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f812 	bl	800284c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
	...

08002860 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e0dc      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1da>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d81c      	bhi.n	80028ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b05      	subs	r3, #5
 80028a2:	221f      	movs	r2, #31
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4019      	ands	r1, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b05      	subs	r3, #5
 80028bc:	fa00 f203 	lsl.w	r2, r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34
 80028c8:	e03c      	b.n	8002944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d81c      	bhi.n	800290c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b23      	subs	r3, #35	; 0x23
 80028e4:	221f      	movs	r2, #31
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4019      	ands	r1, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	3b23      	subs	r3, #35	; 0x23
 80028fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
 800290a:	e01b      	b.n	8002944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b41      	subs	r3, #65	; 0x41
 800291e:	221f      	movs	r2, #31
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	4019      	ands	r1, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b41      	subs	r3, #65	; 0x41
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d91c      	bls.n	8002986 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68d9      	ldr	r1, [r3, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	3b1e      	subs	r3, #30
 800295e:	2207      	movs	r2, #7
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	4019      	ands	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6898      	ldr	r0, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	3b1e      	subs	r3, #30
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e019      	b.n	80029ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6919      	ldr	r1, [r3, #16]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	2207      	movs	r2, #7
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	4019      	ands	r1, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6898      	ldr	r0, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	d132      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_ADC_ConfigChannel+0x1e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d125      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d126      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029f0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d11a      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_ADC_ConfigChannel+0x1e8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_ADC_ConfigChannel+0x1ec>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	0c9a      	lsrs	r2, r3, #18
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1b2>
 8002a1e:	e007      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012400 	.word	0x40012400
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d039      	beq.n	8002ae2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <ADC_Enable+0x9c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <ADC_Enable+0xa0>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9b      	lsrs	r3, r3, #18
 8002a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a8c:	e002      	b.n	8002a94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f9      	bne.n	8002a8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a9a:	f7ff fb27 	bl	80020ec <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aa0:	e018      	b.n	8002ad4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa2:	f7ff fb23 	bl	80020ec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d911      	bls.n	8002ad4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d1df      	bne.n	8002aa2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000000 	.word	0x20000000
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d127      	bne.n	8002b5e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b1e:	f7ff fae5 	bl	80020ec <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b24:	e014      	b.n	8002b50 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b26:	f7ff fae1 	bl	80020ec <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d90d      	bls.n	8002b50 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f043 0210 	orr.w	r2, r3, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d0e3      	beq.n	8002b26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <__NVIC_EnableIRQ+0x34>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff90 	bl	8002c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff2d 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff42 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff90 	bl	8002c6c <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5f 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff35 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b08b      	sub	sp, #44	; 0x2c
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	e127      	b.n	8002ffc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dac:	2201      	movs	r2, #1
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f040 8116 	bne.w	8002ff6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	d034      	beq.n	8002e3c <HAL_GPIO_Init+0xa4>
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d80d      	bhi.n	8002df2 <HAL_GPIO_Init+0x5a>
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d02b      	beq.n	8002e32 <HAL_GPIO_Init+0x9a>
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d804      	bhi.n	8002de8 <HAL_GPIO_Init+0x50>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d031      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d01c      	beq.n	8002e20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002de6:	e048      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d043      	beq.n	8002e74 <HAL_GPIO_Init+0xdc>
 8002dec:	2b11      	cmp	r3, #17
 8002dee:	d01b      	beq.n	8002e28 <HAL_GPIO_Init+0x90>
          break;
 8002df0:	e043      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002df2:	4a89      	ldr	r2, [pc, #548]	; (8003018 <HAL_GPIO_Init+0x280>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d026      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
 8002df8:	4a87      	ldr	r2, [pc, #540]	; (8003018 <HAL_GPIO_Init+0x280>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d806      	bhi.n	8002e0c <HAL_GPIO_Init+0x74>
 8002dfe:	4a87      	ldr	r2, [pc, #540]	; (800301c <HAL_GPIO_Init+0x284>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d020      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
 8002e04:	4a86      	ldr	r2, [pc, #536]	; (8003020 <HAL_GPIO_Init+0x288>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01d      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
          break;
 8002e0a:	e036      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e0c:	4a85      	ldr	r2, [pc, #532]	; (8003024 <HAL_GPIO_Init+0x28c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
 8002e12:	4a85      	ldr	r2, [pc, #532]	; (8003028 <HAL_GPIO_Init+0x290>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d016      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
 8002e18:	4a84      	ldr	r2, [pc, #528]	; (800302c <HAL_GPIO_Init+0x294>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0xae>
          break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	623b      	str	r3, [r7, #32]
          break;
 8002e26:	e028      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e023      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e01e      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	330c      	adds	r3, #12
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e019      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e012      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	611a      	str	r2, [r3, #16]
          break;
 8002e66:	e008      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	615a      	str	r2, [r3, #20]
          break;
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	d801      	bhi.n	8002e84 <HAL_GPIO_Init+0xec>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	e001      	b.n	8002e88 <HAL_GPIO_Init+0xf0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2bff      	cmp	r3, #255	; 0xff
 8002e8e:	d802      	bhi.n	8002e96 <HAL_GPIO_Init+0xfe>
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_Init+0x104>
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3b08      	subs	r3, #8
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	401a      	ands	r2, r3
 8002eae:	6a39      	ldr	r1, [r7, #32]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8096 	beq.w	8002ff6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eca:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_GPIO_Init+0x298>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_GPIO_Init+0x298>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6193      	str	r3, [r2, #24]
 8002ed6:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x298>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee2:	4a54      	ldr	r2, [pc, #336]	; (8003034 <HAL_GPIO_Init+0x29c>)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_GPIO_Init+0x2a0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x19e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_GPIO_Init+0x2a4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x19a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a49      	ldr	r2, [pc, #292]	; (8003040 <HAL_GPIO_Init+0x2a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x196>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a48      	ldr	r2, [pc, #288]	; (8003044 <HAL_GPIO_Init+0x2ac>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x192>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x1a0>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x1a0>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x1a0>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x1a0>
 8002f36:	2300      	movs	r3, #0
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f48:	493a      	ldr	r1, [pc, #232]	; (8003034 <HAL_GPIO_Init+0x29c>)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f62:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4938      	ldr	r1, [pc, #224]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
 8002f6e:	e006      	b.n	8002f7e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4933      	ldr	r1, [pc, #204]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	492e      	ldr	r1, [pc, #184]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e006      	b.n	8002fa6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4929      	ldr	r1, [pc, #164]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fb2:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4924      	ldr	r1, [pc, #144]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	491f      	ldr	r1, [pc, #124]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	491a      	ldr	r1, [pc, #104]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60cb      	str	r3, [r1, #12]
 8002fe6:	e006      	b.n	8002ff6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4915      	ldr	r1, [pc, #84]	; (8003048 <HAL_GPIO_Init+0x2b0>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	f47f aed0 	bne.w	8002dac <HAL_GPIO_Init+0x14>
  }
}
 800300c:	bf00      	nop
 800300e:	372c      	adds	r7, #44	; 0x2c
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	10210000 	.word	0x10210000
 800301c:	10110000 	.word	0x10110000
 8003020:	10120000 	.word	0x10120000
 8003024:	10310000 	.word	0x10310000
 8003028:	10320000 	.word	0x10320000
 800302c:	10220000 	.word	0x10220000
 8003030:	40021000 	.word	0x40021000
 8003034:	40010000 	.word	0x40010000
 8003038:	40010800 	.word	0x40010800
 800303c:	40010c00 	.word	0x40010c00
 8003040:	40011000 	.word	0x40011000
 8003044:	40011400 	.word	0x40011400
 8003048:	40010400 	.word	0x40010400

0800304c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800305c:	787b      	ldrb	r3, [r7, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003068:	e003      	b.n	8003072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e26c      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8087 	beq.w	80031aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a8:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d112      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d10b      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c2:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d06c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x12c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d168      	bne.n	80031a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e246      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x76>
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7f      	ldr	r2, [pc, #508]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e02e      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x98>
 80030fa:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0xbc>
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a71      	ldr	r2, [pc, #452]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6e      	ldr	r2, [pc, #440]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003138:	4b6b      	ldr	r3, [pc, #428]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe ffc8 	bl	80020ec <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe ffc4 	bl	80020ec <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1fa      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xe4>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe ffb4 	bl	80020ec <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe ffb0 	bl	80020ec <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1e6      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x10c>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1ba      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4939      	ldr	r1, [pc, #228]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fe ff69 	bl	80020ec <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe ff65 	bl	80020ec <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e19b      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4927      	ldr	r1, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe ff48 	bl	80020ec <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe ff44 	bl	80020ec <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e17a      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03a      	beq.n	8003300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe ff28 	bl	80020ec <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe ff24 	bl	80020ec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e15a      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 fac6 	bl	8003850 <RCC_Delay>
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fe ff0e 	bl	80020ec <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	e00f      	b.n	80032f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe ff0a 	bl	80020ec <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d908      	bls.n	80032f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e140      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	42420000 	.word	0x42420000
 80032f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	4b9e      	ldr	r3, [pc, #632]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e9      	bne.n	80032d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80a6 	beq.w	800345a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a93      	ldr	r2, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b91      	ldr	r3, [pc, #580]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b8e      	ldr	r3, [pc, #568]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b8b      	ldr	r3, [pc, #556]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a8a      	ldr	r2, [pc, #552]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fecb 	bl	80020ec <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe fec7 	bl	80020ec <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0fd      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x312>
 8003380:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	e02d      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x334>
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a72      	ldr	r2, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	e01c      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x356>
 80033b8:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a6c      	ldr	r2, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e00b      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d015      	beq.n	800341e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fe7b 	bl	80020ec <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fe77 	bl	80020ec <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0ab      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	4b57      	ldr	r3, [pc, #348]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ee      	beq.n	80033fa <HAL_RCC_OscConfig+0x37e>
 800341c:	e014      	b.n	8003448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe fe65 	bl	80020ec <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fe61 	bl	80020ec <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e095      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8081 	beq.w	8003566 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d061      	beq.n	8003534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d146      	bne.n	8003506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fe35 	bl	80020ec <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe fe31 	bl	80020ec <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e067      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	492d      	ldr	r1, [pc, #180]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a19      	ldr	r1, [r3, #32]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	430b      	orrs	r3, r1
 80034d2:	4927      	ldr	r1, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fe05 	bl	80020ec <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fe01 	bl	80020ec <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e037      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x46a>
 8003504:	e02f      	b.n	8003566 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fdee 	bl	80020ec <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fdea 	bl	80020ec <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e020      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x498>
 8003532:	e018      	b.n	8003566 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e013      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	429a      	cmp	r2, r3
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420060 	.word	0x42420060

0800357c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d0      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4965      	ldr	r1, [pc, #404]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d040      	beq.n	800369c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e073      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4936      	ldr	r1, [pc, #216]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7fe fd3e 	bl	80020ec <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe fd3a 	bl	80020ec <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e053      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d210      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	4922      	ldr	r1, [pc, #136]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4601      	mov	r1, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	fa21 f303 	lsr.w	r3, r1, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1cc>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1d0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fc9c 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40022000 	.word	0x40022000
 8003740:	40021000 	.word	0x40021000
 8003744:	080048c8 	.word	0x080048c8
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b490      	push	{r4, r7}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003758:	1d3c      	adds	r4, r7, #4
 800375a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x46>
 800378e:	e02d      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003790:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003792:	623b      	str	r3, [r7, #32]
      break;
 8003794:	e02d      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037a2:	4413      	add	r3, r2
 80037a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c5b      	lsrs	r3, r3, #17
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037c2:	4413      	add	r3, r2
 80037c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ce:	fb02 f203 	mul.w	r2, r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e004      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	623b      	str	r3, [r7, #32]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ee:	623b      	str	r3, [r7, #32]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc90      	pop	{r4, r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	08004178 	.word	0x08004178
 8003804:	08004188 	.word	0x08004188
 8003808:	40021000 	.word	0x40021000
 800380c:	007a1200 	.word	0x007a1200
 8003810:	003d0900 	.word	0x003d0900

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b02      	ldr	r3, [pc, #8]	; (8003824 <HAL_RCC_GetHCLKFreq+0x10>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800382c:	f7ff fff2 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0adb      	lsrs	r3, r3, #11
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	080048d8 	.word	0x080048d8

08003850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <RCC_Delay+0x34>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <RCC_Delay+0x38>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0a5b      	lsrs	r3, r3, #9
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800386c:	bf00      	nop
  }
  while (Delay --);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	60fa      	str	r2, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <RCC_Delay+0x1c>
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000
 8003888:	10624dd3 	.word	0x10624dd3

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ac:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b4c      	ldr	r3, [pc, #304]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	61d3      	str	r3, [r2, #28]
 80038c4:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d118      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ec:	f7fe fbfe 	bl	80020ec <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fe fbfa 	bl	80020ec <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e06d      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d027      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003946:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe fbc9 	bl	80020ec <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe fbc5 	bl	80020ec <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e036      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ee      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4917      	ldr	r1, [pc, #92]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	4313      	orrs	r3, r2
 8003990:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	490b      	ldr	r1, [pc, #44]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42420440 	.word	0x42420440

080039f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b08d      	sub	sp, #52	; 0x34
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a00:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a02:	f107 040c 	add.w	r4, r7, #12
 8003a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d07f      	beq.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d002      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d048      	beq.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a34:	e08b      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a3c:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d07f      	beq.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	0c9b      	lsrs	r3, r3, #18
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a54:	4413      	add	r3, r2
 8003a56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a5a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0c5b      	lsrs	r3, r3, #17
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a74:	4413      	add	r3, r2
 8003a76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a86:	4a37      	ldr	r2, [pc, #220]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	4a33      	ldr	r2, [pc, #204]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ab4:	e048      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ac4:	e040      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d108      	bne.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae8:	e01f      	b.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d109      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003b02:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b08:	e00f      	b.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b14:	d11a      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003b22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b28:	e010      	b.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b2c:	f7ff fe7c 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0b9b      	lsrs	r3, r3, #14
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003b48:	bf00      	nop
 8003b4a:	e000      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003b4c:	bf00      	nop
    }
  }
  return (frequency);
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3734      	adds	r7, #52	; 0x34
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	0800418c 	.word	0x0800418c
 8003b5c:	0800419c 	.word	0x0800419c
 8003b60:	40021000 	.word	0x40021000
 8003b64:	007a1200 	.word	0x007a1200
 8003b68:	003d0900 	.word	0x003d0900
 8003b6c:	aaaaaaab 	.word	0xaaaaaaab

08003b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e053      	b.n	8003c2a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fe f91f 	bl	8001de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	0c1a      	lsrs	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f002 0204 	and.w	r2, r2, #4
 8003c08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_Transmit+0x22>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e11e      	b.n	8003e92 <HAL_SPI_Transmit+0x260>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fe fa46 	bl	80020ec <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c76:	e103      	b.n	8003e80 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_Transmit+0x52>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c88:	e0fa      	b.n	8003e80 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d107      	bne.n	8003ce2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d007      	beq.n	8003d00 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d08:	d14b      	bne.n	8003da2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0xe6>
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d13e      	bne.n	8003d96 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d3c:	e02b      	b.n	8003d96 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d112      	bne.n	8003d72 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d70:	e011      	b.n	8003d96 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d72:	f7fe f9bb 	bl	80020ec <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d803      	bhi.n	8003d8a <HAL_SPI_Transmit+0x158>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d102      	bne.n	8003d90 <HAL_SPI_Transmit+0x15e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d94:	e074      	b.n	8003e80 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ce      	bne.n	8003d3e <HAL_SPI_Transmit+0x10c>
 8003da0:	e04c      	b.n	8003e3c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Transmit+0x17e>
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d140      	bne.n	8003e32 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd6:	e02c      	b.n	8003e32 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d113      	bne.n	8003e0e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e0c:	e011      	b.n	8003e32 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0e:	f7fe f96d 	bl	80020ec <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d803      	bhi.n	8003e26 <HAL_SPI_Transmit+0x1f4>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d102      	bne.n	8003e2c <HAL_SPI_Transmit+0x1fa>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e30:	e026      	b.n	8003e80 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1cd      	bne.n	8003dd8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f894 	bl	8003f6e <SPI_EndRxTxTransaction>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e000      	b.n	8003e80 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eaa:	e04c      	b.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d048      	beq.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003eb4:	f7fe f91a 	bl	80020ec <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d902      	bls.n	8003eca <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d13d      	bne.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee2:	d111      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eec:	d004      	beq.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d107      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	d10f      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e00f      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1a3      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af02      	add	r7, sp, #8
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff88 	bl	8003e9a <SPI_WaitFlagStateUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	2500      	movs	r5, #0
 8003fbc:	4e0c      	ldr	r6, [pc, #48]	; (8003ff0 <__libc_init_array+0x38>)
 8003fbe:	4c0d      	ldr	r4, [pc, #52]	; (8003ff4 <__libc_init_array+0x3c>)
 8003fc0:	1ba4      	subs	r4, r4, r6
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	42a5      	cmp	r5, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	f000 f8ca 	bl	8004160 <_init>
 8003fcc:	2500      	movs	r5, #0
 8003fce:	4e0a      	ldr	r6, [pc, #40]	; (8003ff8 <__libc_init_array+0x40>)
 8003fd0:	4c0a      	ldr	r4, [pc, #40]	; (8003ffc <__libc_init_array+0x44>)
 8003fd2:	1ba4      	subs	r4, r4, r6
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	42a5      	cmp	r5, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe0:	4798      	blx	r3
 8003fe2:	3501      	adds	r5, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fea:	4798      	blx	r3
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	080048e0 	.word	0x080048e0
 8003ff4:	080048e0 	.word	0x080048e0
 8003ff8:	080048e0 	.word	0x080048e0
 8003ffc:	080048e4 	.word	0x080048e4

08004000 <memset>:
 8004000:	4603      	mov	r3, r0
 8004002:	4402      	add	r2, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <rand>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <rand+0x50>)
 8004014:	681c      	ldr	r4, [r3, #0]
 8004016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004018:	b97b      	cbnz	r3, 800403a <rand+0x2a>
 800401a:	2018      	movs	r0, #24
 800401c:	f000 f82c 	bl	8004078 <malloc>
 8004020:	4a10      	ldr	r2, [pc, #64]	; (8004064 <rand+0x54>)
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <rand+0x58>)
 8004024:	63a0      	str	r0, [r4, #56]	; 0x38
 8004026:	e9c0 2300 	strd	r2, r3, [r0]
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <rand+0x5c>)
 800402c:	2201      	movs	r2, #1
 800402e:	6083      	str	r3, [r0, #8]
 8004030:	230b      	movs	r3, #11
 8004032:	8183      	strh	r3, [r0, #12]
 8004034:	2300      	movs	r3, #0
 8004036:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800403a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800403c:	480c      	ldr	r0, [pc, #48]	; (8004070 <rand+0x60>)
 800403e:	690a      	ldr	r2, [r1, #16]
 8004040:	694b      	ldr	r3, [r1, #20]
 8004042:	4350      	muls	r0, r2
 8004044:	4c0b      	ldr	r4, [pc, #44]	; (8004074 <rand+0x64>)
 8004046:	fb04 0003 	mla	r0, r4, r3, r0
 800404a:	fba2 2304 	umull	r2, r3, r2, r4
 800404e:	4403      	add	r3, r0
 8004050:	1c54      	adds	r4, r2, #1
 8004052:	f143 0500 	adc.w	r5, r3, #0
 8004056:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800405a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	2000000c 	.word	0x2000000c
 8004064:	abcd330e 	.word	0xabcd330e
 8004068:	e66d1234 	.word	0xe66d1234
 800406c:	0005deec 	.word	0x0005deec
 8004070:	5851f42d 	.word	0x5851f42d
 8004074:	4c957f2d 	.word	0x4c957f2d

08004078 <malloc>:
 8004078:	4b02      	ldr	r3, [pc, #8]	; (8004084 <malloc+0xc>)
 800407a:	4601      	mov	r1, r0
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	f000 b803 	b.w	8004088 <_malloc_r>
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c

08004088 <_malloc_r>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	1ccd      	adds	r5, r1, #3
 800408c:	f025 0503 	bic.w	r5, r5, #3
 8004090:	3508      	adds	r5, #8
 8004092:	2d0c      	cmp	r5, #12
 8004094:	bf38      	it	cc
 8004096:	250c      	movcc	r5, #12
 8004098:	2d00      	cmp	r5, #0
 800409a:	4606      	mov	r6, r0
 800409c:	db01      	blt.n	80040a2 <_malloc_r+0x1a>
 800409e:	42a9      	cmp	r1, r5
 80040a0:	d903      	bls.n	80040aa <_malloc_r+0x22>
 80040a2:	230c      	movs	r3, #12
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	2000      	movs	r0, #0
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	f000 f857 	bl	800415c <__malloc_lock>
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <_malloc_r+0xac>)
 80040b0:	6814      	ldr	r4, [r2, #0]
 80040b2:	4621      	mov	r1, r4
 80040b4:	b991      	cbnz	r1, 80040dc <_malloc_r+0x54>
 80040b6:	4c20      	ldr	r4, [pc, #128]	; (8004138 <_malloc_r+0xb0>)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	b91b      	cbnz	r3, 80040c4 <_malloc_r+0x3c>
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f83d 	bl	800413c <_sbrk_r>
 80040c2:	6020      	str	r0, [r4, #0]
 80040c4:	4629      	mov	r1, r5
 80040c6:	4630      	mov	r0, r6
 80040c8:	f000 f838 	bl	800413c <_sbrk_r>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d124      	bne.n	800411a <_malloc_r+0x92>
 80040d0:	230c      	movs	r3, #12
 80040d2:	4630      	mov	r0, r6
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	f000 f842 	bl	800415e <__malloc_unlock>
 80040da:	e7e4      	b.n	80040a6 <_malloc_r+0x1e>
 80040dc:	680b      	ldr	r3, [r1, #0]
 80040de:	1b5b      	subs	r3, r3, r5
 80040e0:	d418      	bmi.n	8004114 <_malloc_r+0x8c>
 80040e2:	2b0b      	cmp	r3, #11
 80040e4:	d90f      	bls.n	8004106 <_malloc_r+0x7e>
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	18cc      	adds	r4, r1, r3
 80040ea:	50cd      	str	r5, [r1, r3]
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 f836 	bl	800415e <__malloc_unlock>
 80040f2:	f104 000b 	add.w	r0, r4, #11
 80040f6:	1d23      	adds	r3, r4, #4
 80040f8:	f020 0007 	bic.w	r0, r0, #7
 80040fc:	1ac3      	subs	r3, r0, r3
 80040fe:	d0d3      	beq.n	80040a8 <_malloc_r+0x20>
 8004100:	425a      	negs	r2, r3
 8004102:	50e2      	str	r2, [r4, r3]
 8004104:	e7d0      	b.n	80040a8 <_malloc_r+0x20>
 8004106:	684b      	ldr	r3, [r1, #4]
 8004108:	428c      	cmp	r4, r1
 800410a:	bf16      	itet	ne
 800410c:	6063      	strne	r3, [r4, #4]
 800410e:	6013      	streq	r3, [r2, #0]
 8004110:	460c      	movne	r4, r1
 8004112:	e7eb      	b.n	80040ec <_malloc_r+0x64>
 8004114:	460c      	mov	r4, r1
 8004116:	6849      	ldr	r1, [r1, #4]
 8004118:	e7cc      	b.n	80040b4 <_malloc_r+0x2c>
 800411a:	1cc4      	adds	r4, r0, #3
 800411c:	f024 0403 	bic.w	r4, r4, #3
 8004120:	42a0      	cmp	r0, r4
 8004122:	d005      	beq.n	8004130 <_malloc_r+0xa8>
 8004124:	1a21      	subs	r1, r4, r0
 8004126:	4630      	mov	r0, r6
 8004128:	f000 f808 	bl	800413c <_sbrk_r>
 800412c:	3001      	adds	r0, #1
 800412e:	d0cf      	beq.n	80040d0 <_malloc_r+0x48>
 8004130:	6025      	str	r5, [r4, #0]
 8004132:	e7db      	b.n	80040ec <_malloc_r+0x64>
 8004134:	20000324 	.word	0x20000324
 8004138:	20000328 	.word	0x20000328

0800413c <_sbrk_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	2300      	movs	r3, #0
 8004140:	4c05      	ldr	r4, [pc, #20]	; (8004158 <_sbrk_r+0x1c>)
 8004142:	4605      	mov	r5, r0
 8004144:	4608      	mov	r0, r1
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	f7fd fef2 	bl	8001f30 <_sbrk>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d102      	bne.n	8004156 <_sbrk_r+0x1a>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	b103      	cbz	r3, 8004156 <_sbrk_r+0x1a>
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	20000430 	.word	0x20000430

0800415c <__malloc_lock>:
 800415c:	4770      	bx	lr

0800415e <__malloc_unlock>:
 800415e:	4770      	bx	lr

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
